{"config":{"lang":["nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Webtechnologie 3","text":"<p>In deze pagina's kun je alle informatie vinden voor het vak Webtechnologie 3. In deze module richten we ons met name (eigenlijk: uitsluitend) op de voorkant van webapplicaties.</p>"},{"location":"index.html#hoorcollege-en-practica","title":"Hoorcollege en practica","text":"<p>Elke week is er \u00e9\u00e9n hoorcollege en \u00e9\u00e9n (groot) practicum. Tijdens het hoorcollege worden de concepten die in de betreffende week centraal staan op een meer algemene, theoretische manier besproken. Er wordt hier stilgestaan bij het hoe en het waarom van de specifieke methoden en technieken die het web maken wat het is. Ook wordt bij dit college wat meer achtergrondinformatie verschaft, die je kan helpen zaken in de juiste context te plaatsen.</p> <p>Het practicum is centraal georganiseerd, duurt twee keer anderhalf uur en wordt plenair uitgevoerd. Tijdens het eerste deel worden de concepten van die week aan de hand van kleine, concrete en specifieke opdrachten verder uitgediept. Nadat de opdracht plenair is besproken en toegelicht, gaan de studenten individueel aan het werk terwijl de docenten rondlopen om vragen te stellen en te beantwoorden. Na een korte periode wordt het geheel weer plenair teruggepakt en ge\u00ebvalueerd. Deze cyclus herhaalt zich drie of vier keer.</p> <p>Het tweede deel van het practicum is er gelegenheid om aan het memory-spel te werken. Docenten zijn dan beschikbaar om vragen te stellen of voor feedback.</p>"},{"location":"index.html#weekindeling","title":"Weekindeling","text":"<p>De module kent de volgende weekindeling</p> week onderwerpen oplevering 1 Inleiding, HTML en CSS 1 2 HTML en CSS 2 1. Memory in HTML en CSS 3 JavaScript Herkansing oplevering 1 4 JavaScript async programmeren 2. Memory met interactieve functionaliteit 5 Beveiliging en JWT Herkansing oplevering 2 6 MVC en Frameworks 1 3. Inloggen met JWT 7 MVC en Frameworks 2 Herkansing oplevering 3 8 Uitloop 4. Data-aggregatie 9 Herkansing oplevering 4"},{"location":"index.html#toetsing-beoordeling-en-herkansingsmogelijkheden","title":"Toetsing, beoordeling en herkansingsmogelijkheden","text":"<p>Tijdens de module werken studenten in duo's aan een website waarmee het bekende memory-spel ge\u00efmplementeerd moet worden. De realisatie van deze site volgt het klassieke ontwikkelmodel en tevens de onderdelen die in de tabel hierboven worden weergegeven. Er wordt eerst een statische webpagina gemaakt met puur de HTML en de CSS, vervolgens wordt client-based functionaliteit toegevoegd met behulp van JavaScript. Daarna wordt er gebruik gemaakt van een backend (of eigenlijk meerdere backends) om plaatjes van dit memory-spel op te helen, om de gegevens van spelers op te slaan en scores bij te houden. </p> <p>Dit moet uiteraard voorzien worden van login-functionaliteit en beveiliging, waar we JWT voor gebruiken. Uiteindelijk moet er ook een pagina gemaakt worden waarbij de opgeslagen data geaggregeerd bevraagd kan worden \u2013 denk aan het aantal spelers, de verdeling van de spelers over de tijd, mutaties in de high-scores en meer van dat soort werk.</p> <p>Ongeveer om de week is er een formeel oplevermoment van de website tot dusver (maar zie het exacte overzicht). Hiervoor leveren de duo's hun werk in op de daartoe beschikbaar gestelde opleverplekken in Blackboard. De deadline voor het inleveren is telkens de donderdag in de even weken van het thema (zie Blackboard voor de concrete data). Docenten beoordelen het ingeleverde werk op de vrijdag.</p> <p>In het toetsmodel staat beschreven waar de applicatie op dat moment minimaal aan moet voldoen. Mocht het werk van een bepaalde week nog onvoldoende zijn, dan kunnen studenten de daaropvolgende week gebruiken om reparatiewerkzaamheden uit te voeren. Omdat de memory-website sequentieel wordt opgebouwd en elke nieuwe iteratie afhankelijk is van de afronding van de vorige is het van belang dat hier geen achterstand bij ontstaat. Studenten wordt dan ook geadviseerd een goede planning op te zetten en zich daaraan te houden.</p>"},{"location":"colleges.html","title":"Hoorcolleges","text":"<p>Elke week wordt voorafgegaan door een hoorcollege. Voor zover daar presentaties bij worden gebruikt, worden die op deze pagina beschikbaar gesteld.</p>"},{"location":"memory-beoordeling.html","title":"Beoordelingsmodel memory-game","text":"<p>Hieronder staat per week schematisch het beoordelingsmodel aan de hand waarvan het memory-spel beoordeeld wordt. Per week kunnen de docenten besluiten nog een bonus of malus toe te kennen.</p> <p>Let op: De toetsmomenten zijn in week 2, week 4, week 5 en week 7.</p>"},{"location":"memory-beoordeling.html#toetsmoment-1","title":"Toetsmoment 1","text":"<p>[Omschrijving]</p> Onderdeel Wegingsfactor Requirements Voorwaardelijk Vormgeving 1 Responsiveness 3 Accessibility 3 Mobile first 2 Repository setup 1 Leesopdracht 4"},{"location":"memory-beoordeling.html#toetsmoment-2","title":"Toetsmoment 2","text":"<p>[Omschrijving]</p> Onderdeel Wegingsfactor Requirements wk 3 Voorwaardelijk Gebruik van Promises en fetch 2 externe API's 2 Fijne manier van feliciteren 1 code-kwaliteit 2 leesopdracht Voorwaardelijk"},{"location":"memory-beoordeling.html#toetsmoment-3","title":"Toetsmoment 3","text":"<p>[Omschrijving]</p> Onderdeel Wegingsfactor top 5 uit backend Voorwaardelijk speler kan zich registreren 2 speler kan aanmelden 2 jwt-token opgeslagen in local storage 2 voorkeuren-pagina 2 emailadres wijzigen 2 verlopen token melding en loginpagina 1 code-kwaliteit 1 Leesopdracht voorwaardelijk leuk extraatje 1"},{"location":"memory-beoordeling.html#toetsmoment-4","title":"Toetsmoment 4","text":"<p>[Omschrijving]</p> Onderdeel Wegingsfactor Separaat inlogscherm 1 JWT opgeslagen en meegestuurd 1 gebruik van componenten 2 gebruik van services 2 property binding 2 directives 1 typering/interfaces 1 code-kwaliteit 1 leesopdracht Voorwaardelijk Leuke visualisatie 1"},{"location":"memory.html","title":"Toetsing: Memory game","text":"<p>De toetsing van dit kwartaal wordt gedaan aan de hand van het bekende spel memory. Gedurende acht weken werk je samen met een duo-partner aan dit spel, waarbij je op vier verschillende momenten je vorderingen tot dan toe moet inleveren. De eisen die op deze toetsmomenten aan het spel gesteld worden corresponderen met de onderwerken die in die week aan de orde zijn gekomen, zodat je het spel sequentieel kunt opbouwen.</p> <p>Elke week wordt een klein overzicht gegeven van de eisen waar je memory-spel in die week aan moet voldoen. De beoordeling van het werk is op de vrijdag van elke even week in het blok. Inleveren doe je door een zip-bestand van je code op Blackboard te uploaden \u2013 zie de deadlines aldaar. Let op: te laat inleveren is een onvoldoende voor dat onderdeel. </p> <p>Elk onderdeel van het memory-spel wordt met een cijfer beoordeeld. Het eindcijfer voor dit onderdeel is het rekenkundig gemiddelde van deze vier deelcijfers, maar alle weken moeten wel voldoende (5,5 of hoger) zijn. In het geval van een onvoldoende worden er individuele reparatiewerkzaamheden  afgesproken, die studenten in de daaropvolgende week moeten uitvoeren. Zie ook het onderdeel toetsing, beoordeling en herkansingsmogelijkheden in de algemene introductie. Bekijk het beoordelingsmodel om te zien waar je applicatie aan moet voldoen.</p> <p></p>"},{"location":"practicum.html","title":"Werkwijze tijdens de practica","text":"<p>Elke week is er een plenair practicum van twee keer anderhalf uur. Tijdens deze practica worden de centrale concepten van de betreffende week (en die bij het hoorcollege zijn toegelicht) aan de hand van korte en specifieke opdrachten uitgewerkt. Er wordt een korte algemene practische introductie van het onderwerp gegeven, waarna de opgave wordt toegelicht. Vervolgens gaan de studenten individueel aan het werk aan deze opgave, terwijl de docenten (en hopelijk de student-assistent) rondlopen om vragen te stellen en te beantwoorden. Na een bepaalde periode wordt de opdracht weer plenair toegelicht en uitgewerkt, waarna deze procedure zich voor een vervolgopdracht herhaalt.</p> <p>De practica zijn bedoeld om de technieken die in die week centraal staan concreet toe te lichten. Deze onderwerpen corresponderen met de eisen die op dat moment aan het memory-spel gesteld worden. Door deze opzet kunnen deze technieken direct ingezet worden. Doordat het een plenair practicum is ontstaat een sfeer van samen doen en samen leren.</p> <p>Na het plenaire deel is er tijdens het practicum ruimte om te werken aan de memory-opgave.</p>"},{"location":"week1/index.html","title":"Week 1: HTML en CSS 1","text":"<p>In deze eerste week kijken we naar de algemene architectuur van het web, bespreken we de verhouding tussen de voor- en de achterkant van webapplicaties en analyseren we de werking van de meest gebruikte soort applicatie: de webbrowser.</p>"},{"location":"week1/index.html#hoorcollege","title":"Hoorcollege","text":"<p>In het hoorcollege gaan we in op de werking van een webbrowser. Wat gebeurt er allemaal vanaf het moment dat je een url in de navitiebalk intypt en op enter druk tot het moment dat er een fraaie webpagina op het scherm tevoorschijn komt? Er wordt ingegaan op de gevolgen die deze ontwikkeling heeft voor de web-ontwikkelaar, hoe om te gaan met verschillende soorten browsers en een diversiteit aan hardware.</p> <p>Na deze meer theoretische inleiding bekijken we de technieken die de web-ontwikkelaar ten dienste staan om op een goede en effectieve manier te werken. We gaan uitgebreid in op de development-tools en laten aan de hand van uitgebeide voorbeelden zien hoe deze kunnen worden ingezet.</p> <p></p> <p>Vervolgens gaan we in op HTML en CSS. We bouwen verder op webtechnologie 1 (dat in de propdeuse gegeven wordt) en op de eerste week van webtechnologie 2 (periode 2.3). We gaan hier in op de exacte werking van deze technieken, bespreken de meer semantische elementen en kijken hoe je kunt ontwerpen voor toegankelijkheid. </p> <p></p>"},{"location":"week1/index.html#practicum","title":"Practicum","text":"<p>Aan de hand van specifieke en concrete opdrachten zullen tijdens het practicum verschillende voorbeelden uitgewerkt worden, waarbij ge\u00ebxperimenteerd wordt met complexe matching rules, reflection en global attributes. We zullen aan de hand van een eenvoudige zelfgemaakte browser de flow layout demonstreren.</p> <p>We kijken ook naar meer creatieve websites, zoals </p> <ul> <li>Live web coding performance, een soort VJ'en in de JavaScript console: https://player.vimeo.com/video/318721981?dnt=true</li> <li>Scultpuren van websites: https://jip.debeer.it/facebook-in-gold/ en https://jip.debeer.it/google-in-gold/</li> <li>http://motherfuckingwebsite.com/ en http://bettermotherfuckingwebsite.com/ en https://thebestmotherfucking.website/</li> <li>https://theuselessweb.com/</li> <li>https://pointerpointer.com/</li> </ul>"},{"location":"week1/memory.html","title":"Memory week 1","text":"<p>Gedurende dit kwartaal maken we het bekende spel 'Memory' na. Eerst alleen nog in HTML en CSS., maar elke week breiden we het uit met meer functionaliteit. Deze week zetten we de layout op en voegen we wat minimale styling toe aan het memory spel.</p> <p>Maak een leeg HTML bestand aan, en cre\u00eber een HTML \"skelet\" (een soort \"hello world\" bestand). Zorg in ieder geval dat er een document type gedeclareerd wordt, en dat de html- en bodytags er op een juiste manier in staan. Bestudeer eventueel de HTML Basic op w3schools.</p> <p>Bestudeer onderstaande afbeelding van het memory spel en zorg er met HTML elementen voor dat het dezelfde functionaliteit heeft als wat je op de afbeelding ziet: titels, teksten, knopjes, en een speelveld van 6 bij 6. Je mag voor de eerste oplevering nog geen echte functionaliteit inbouwen \u2013 dat komt in de volgende paar weken uitgebreid aan bod.</p> <p>De speelvlakken hebben vooralsnog twee statussen: 'open' en 'gesloten'. Nu volstaat het om deze twee \"hard coded\" aan verschillende <code>div</code>s mee te geven \u2013 in de loop van de komende periode zullen we hier werkelijk functionaliteit aan toevoegen. Bekijk de volledige omschrijving bij het oplevermoment.</p> <p></p>"},{"location":"week1/practicum.html","title":"Practicum week 1 - Browsers, HTML &amp; CSS (1)","text":"<p>In dit practicum maak je kennis met algemene frontend technieken, waaronder componenten van de webbrowser en webpagina's, html elementen, developer tools, netwerk, console, JavaScript, styling, etc. </p> <p>1e helft: Browser &amp; webpagina's - Inspect element - Styles - Network - Console - Performance</p> <p>2e helft: HTML &amp; CSS - CV bouwen</p>"},{"location":"week1/practicum.html#1-browser-webpaginas","title":"1. Browser &amp; webpagina's","text":"<p>Open de browser en navigeer naar hanze.nl. Klik met de rechtermuistoets ergens willekeurig op de pagina en selecteer \u201cinspect\u201d of \u201cinspect element\u201d.</p> <ol> <li> <p>Wat voor soort HTML elementen/tags worden gebruikt voor het opsommen van de lijst opleidingen, open dagen &amp; voorlichtingen, en bedrijven? </p> </li> <li> <p>Vind voorbeelden van:</p> <ul> <li><code>&lt;a&gt;</code></li> <li><code>&lt;p&gt;</code></li> <li><code>&lt;h1&gt;</code></li> <li><code>&lt;input&gt;</code></li> <li><code>&lt;li&gt;</code></li> <li><code>&lt;span&gt;</code></li> </ul> </li> </ol> <p>Verander de nieuwskoppen van je favoriete nieuwssite naar wat luchtiger/positiever nieuws, publiceer de schermafbeelding ervan op deze Padlet.</p> <p></p> <p>Ga naar het Twitter account van de Amerikaanse president Joe Biden. Als je een twitter account hebt, zorg dan dat je uitgelogd bent.</p> <ol> <li> <p>Scroll naar beneden en je zult gevraagd worden om in te loggen of te registeren. Doe dit niet. Zorg in plaats daarvan dat je de \"muur\" verwijdert, het het scrollen weer activeert. Hint: zoek naar het element waarbij in CSS de <code>pointer-events</code> zijn uitgeschakeld (tabje Styles). Als je die gevonden hebt, schakel de pointer events weer in.</p> </li> <li> <p>Pas vervolgens een willekeurige tweet aan door een tekst naar keuze, publiceer de schermafbeelding ervan op deze Padlet.</p> </li> </ol> <p></p> <p>Wat vind je ervan dat je zomaar nieuwssites en Twitter posts kunt aanpassen?</p> <p></p>"},{"location":"week1/practicum.html#styles","title":"Styles","text":"<p>Open de browser en navigeer naar hanze.nl. Klik met de rechtermuistoets ergens willekeurig op de pagina en selecteer \u201cinspect\u201d of \u201cinspect element\u201d. Open in het tabje Elements het tabje Styles.</p> <ol> <li>Selecteer een element dat de typische Hanze-oranje kleur bevat. Wat is de kleurcode?</li> <li>Maak het Hanze logo twee keer zo groot.</li> <li>Verwijder de achtergrond foto.</li> <li>De Hanze website wordt natuurlijk veel mooier in een developer-achtige look. Geef alle tekst het lettertype <code>monospace</code>.</li> <li>Vervang de teksten bovenaan de pagina (welkomsttekst, menu-items, etc.) door teksten naar keuze.</li> <li>Vervang de achtergrondkleuren door een kleur naar keuze.</li> <li>Vervang het Hanze logo door een logo van een ander bedrijf naar keuze (link).</li> <li>Publiceer de schermafbeelding ervan op deze Padlet.</li> </ol> <p></p>"},{"location":"week1/practicum.html#network","title":"Network","text":"<ol> <li> <p>Open het tabje Network/Netwerk en ververs hanze.nl. Wat is de url van de eerste foto op de pagina?</p> </li> <li> <p>We gaan testen hoe snel de website laadt op een snel 3G netwerk.</p> <ul> <li>Zorg dat de opname knop aan staat</li> <li>Vink \"disable cache\" aan. </li> <li>Zet network throttling op \"Fast 3G\".</li> <li>Wat is de totale laadtijd van de pagina?</li> <li>Welk bestand is het grootst en neemt het meeste laadtijd in beslag?</li> </ul> </li> </ol> <p></p>"},{"location":"week1/practicum.html#console","title":"Console","text":"<p>Navigeer naar google.com. Verwijder alle elementen behalve de zoekbalk en het microfoon icoontje.</p> <p>Selecteer het google logo (<code>img</code> element) en typ naast <code>class=\"..\"</code> het volgende: </p> <pre><code>id=\"google-logo\"\n</code></pre> <p>Open de tab 'console' en voer de volgende JavaScript code uit:</p> <pre><code>document.getElementById(\"google-logo\").animate([\n// keyframes\n{ transform: 'rotate(0deg)' },\n{ transform: 'rotate(360deg)' }\n], {\n// timing options\nduration: 1000,\niterations: Infinity\n});\n</code></pre> <p>Wat gebeurt er met het logo?</p> <p>Voer bovenstaande code nogmaals uit, maar vervang dit keer de woorden <code>rotate</code> door <code>skewY</code>. Wat gebeurt er nu? Kun je dit ook op andere elementen toepassen? (let op: geef elk element een uniek id, en gebruik dit id ook in de code) </p> <p>Voeg dit principe toe aan een andere website naar keuze, en doe dit met meerdere elementen. Wie maakt de meest gestoorde webpagina? Publiceer de schermafbeelding ervan op deze Padlet</p> <p></p>"},{"location":"week1/practicum.html#performance","title":"Performance","text":"<p>Bekijk en inspecteer de website: http://motherfuckingwebsite.com/. De makers ervan beweren dat dit d\u00e9 perfecte website is, onder andere omdat het lightweight is en snel laadt. We gaan deze bewering over de high performance testen met Lighthouse. </p> <ul> <li> <p>Vergelijk de score voor performance met deze sites: hanze.nl, nos.nl, en w3schools.com. Wat zijn de scores? Waardoor denk je dat de een beter scoort dan de ander?</p> </li> <li> <p>Bekijk de details van de performance scores voor de verschillende sites. Wat valt je op?</p> </li> </ul> <p></p>"},{"location":"week1/practicum.html#2-html-css","title":"2. HTML &amp; CSS","text":"<p>Maak in een HTML bestand je (fictieve droom) CV en gebruik tenminste de volgende HTML elementen. Je hoeft nog geen CSS toe te voegen.</p> <ul> <li>headings (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, etc.)</li> <li>divisions (<code>&lt;div&gt;</code>)</li> <li>paragraphs (<code>&lt;p&gt;</code>)</li> <li>tekst formatting (<code>&lt;strong&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;small&gt;</code>, etc.)</li> <li>images (<code>&lt;img&gt;</code>)</li> <li>links (<code>&lt;a&gt;</code>)</li> <li>lists (<code>&lt;ul&gt;</code> of <code>&lt;ol&gt;</code>)</li> <li>table (<code>&lt;table&gt;</code>)</li> </ul> <p></p> <p>Voeg styling toe aan je CV, en denk aan:</p> <ul> <li>kleur</li> <li>lettertype</li> <li>grootte</li> <li>positionering</li> <li>etc.</li> </ul>"},{"location":"week2/index.html","title":"Week 2: HTML en CSS 2","text":"<p>Deze week ronden we het materiaal over html en css voor wat betreft dit thema (en de opleiding) af. Deze technieken zijn dusdanig uitgebreid dat ze op zichzelf een hele opleiding zouden legitimeren (die ook bestaat), maar voor software engineers is het voldoende een meer dan hands-on kennis van te hebben. Specifiek gaan we deze week in op media queries, het concept van de flexbox, de shadow DOM en user components. Met behulp van deze technieken maken we onze websites responsive en zorgen we voor cross browser support.</p>"},{"location":"week2/index.html#hoorcollege","title":"Hoorcollege","text":"<p>Het hoorcollege bespreekt deze onderwerpen op een meer theoretische manier. Er wordt ingegaan op de werking van de flexbox, de shadow DOM en user components, de verschillen met de meer traditionele html/css-elementen en de problemen waar deze technieken een oplossing voor proberen te vormen. We kijken naar specifieke use cases die hiermee gepaard kunnen gaan.</p> <p>Behalve een meer theoretische aanpak, zal ook de praktijk aan bod komen. Aan de hand van live coding zullen voorbeelden en uitwerkingen de revue passeren, waarbij de mogelijkheden (en problemen natuurlijk) duidelijk gemaakt worden. Deze praktische aanpak zal zijn weerslag hebben in het hierbij horende practicum.</p> <p></p>"},{"location":"week2/index.html#practicum","title":"Practicum","text":"<p>Ook tijdens het practicum staan media queries, css-animations en positioning (met name de flexbox. Elk van deze onderwerpen zal aan de hand van een kleine concrete en specifieke opgave worden uitgediept. </p>"},{"location":"week2/index.html#literatuur","title":"Literatuur","text":"<ul> <li>MDN over de flexbox</li> <li>MDN over de shadow DOM</li> <li>MDN over accessibility</li> </ul>"},{"location":"week2/memory.html","title":"Week 2 - Memory 1 - eerste toetsmoment","text":"<p>Voor het eerste toetsmoment staat hieronder beschreven wat er opgeleverd dient te worden. Zestig procent van de opdracht bestaat uit het ontwikkelen van het memory spel. Veertig procent bestaat uit leesopdrachten \u2013 beantwoord die in een bestand <code>leesopdrachten.txt</code> en voeg die toe aan je zip. Lever de uitwerking van de memory en je antwoorden op de leesopdracht in via het betreffende inleverpunt op Blackboard. </p>"},{"location":"week2/memory.html#memory-1-70","title":"Memory 1 (70%)","text":"<p>Let op: alleen visueel!</p> <p>Let op: het is specifiek niet de bedoeling dat alle functionaliteit die hieronder gesuggereerd wordt ook al werkt. In dit eerste moment is het juist het doel de voorkant volledig afgerond te hebben voordat we de boel laten werken.</p> <p>Dit gezegd hebbende is het natuurlijk wel de bedoeling dat de bezoeker van het spel duidelijk te zien krijgt welke elementen interactief zijn en welke niet: zorg hiervoor voor correct werkende en duidelijke affordances (in de betekenis zoals Gibson hieraan gegeven heeft.</p> <p>Zorg ervoor dat met behulp van html en css de onderstaande requirements zijn gerealiseerd:</p> <ul> <li>De pagina heeft een titel</li> <li>Het is duidelijk wat de huidige staat van het spel is:<ul> <li>verlopen tijd</li> <li>resterende tijd</li> <li>aantal gevonden paren</li> </ul> </li> <li>Er is een element dat visueel de tijd weergeeft dat geopende kaarten open blijven (die werkt nu nog niet, maar moet er wel zijn)</li> <li>Er is een speelveld van zes bij zes speelkaarten (dat gaan we eveneens later dynamisch maken)</li> <li>De kaarten hebben \u00e9\u00e9n van de volgende drie statussen, die door middel van css visueel van elkaar te onderscheiden zijn. Zorg ervoor dat van elke status tenminste \u00e9\u00e9n kaart in je uitwerking aanwezig is.<ul> <li>gesloten</li> <li>open</li> <li>gevonden</li> </ul> </li> <li>Er is ruimte voor de volgende informatie:<ul> <li>een top vijf</li> <li>totaal gemiddelde speeltijd</li> </ul> </li> <li>Er zijn twee drop-downs waarmee de volgende instellingen kunnen worden gekozen:<ul> <li>het karakter op de (gesloten) speelkaarten</li> <li>de afmetingen van het speelbord</li> </ul> </li> <li>Er zijn drie kleurselectieknoppen voor de volgende instellingen:<ul> <li>de kleur van de gesloten kaarten</li> <li>de kleur van de open kaarten</li> <li>de kleur van de gevonden kaarten</li> </ul> </li> <li>Er is een knop waarmee het spel gestart kan worden</li> </ul> <p>Verder zijn er nog de volgende niet-functionele vereisten:</p> <ul> <li>Voor de verschillende onderdelen zijn passende HTML elementen gebruikt</li> <li>Er is rekening gehouden met toegankelijkheid, zodat bijvoorbeeld gebruikers met een screen reader de webapplicatie kunnen gebruiken</li> <li>Het spel is responsive en wordt gebruiksvriendelijk getoond op zowel desktop apparaten als mobiele telefoons, waarbij gebruik is gemaakt van mobile-first design. Zorg voor de juiste media-queries.</li> </ul> <p></p>"},{"location":"week2/memory.html#leesopdracht-30","title":"Leesopdracht (30%)","text":"<ol> <li> <p>Lees het artikel over webtoegankelijkheid (of hier als bestand) en beantwoord de volgende vragen in een korte alinea per vraag.</p> <p>a. Probeer je voor te stellen dat je niet (meer) kunt zien, maar wel je favoriete site wilt bezoeken. Welke van de in het artikel genoemde frustratie over (on)toegankelijkheid lijkt jou het meest belemmerend? En waarom?</p> <p>b. Kom je als ziend persoon ook wel eens dingen tegen die jou belemmeren in het correct gebruiken van een website? Beschrijf kort wat je tegenkomt en hoe jij dit beter zou willen doen.</p> </li> <li> <p>Lees het artikel over responsive web design (of hier als bestand) en beantwoord de volgende vraag in een korte alinea.</p> </li> </ol> <p>Er zijn twee benaderingen als het gaat om responsive web design: mobile-first of desktop-first. Niet iedereen is het eens over welke de voorkeur zou moeten hebben, alhoewel de \u00e9\u00e9n wellicht populairder is dan de ander. Dit artikel betoogt een duidelijke voorkeur. Ben jij het met de schrijver van het artikel eens? Leg uit waarom je het hier wel of niet mee eens bent met behulp van een argument dat in het artikel wordt genoemd.</p>"},{"location":"week2/practicum.html","title":"Practicum week 2 \u2013 HTML en CSS (2)","text":""},{"location":"week2/practicum.html#1-test-your-skills","title":"1. Test your skills","text":"<p>Tijdens het hoorcollege is uitgebreid stilgestaan bij de positionering van elementen. We beginnen dit practicum met een twee eenvoudige oefeningen die te vinden zijn op MDN. </p>"},{"location":"week2/practicum.html#2-de-nieuwssite","title":"2. De nieuwssite","text":"<p>Deze en volgende week gaan we werken aan een mooie nieuwssite. Volgende week gaan we daar met behulp van JavaScript interactiviteit aan toevoegen; deze week beginnen we met de boel een beetje flexibeler, fraaier en moderner maken.</p> <p>Download de zip met de nodige bestanden, pak hem uit en open <code>index.html</code> in een browser. Zoals je ziet is de site momenteel nogal rommelig en onprofessioneel vormgegeven. Bestudeer de <code>index.css</code> om je een beeld te vormen van hoe \u00e9\u00e9n en ander is aangepakt.</p> <p>De pagina bestaat uit een aantal onderdelen: de titel met daaronder wat rubrieken (Cultuur, Binnenland, Buitenland, ...). Dan heb je aan de linkerkant de hoofdartikelen (iets met bobslee\u00ebn en bezinepompen) en aan de rechterkant wat overige informatie en reclame. Om het spreken hierover wat te vereenvoudigen, hebben we de verschillende onderdelen in het plaatje hieronder even expliciet benoemd.</p> <p></p>"},{"location":"week2/practicum.html#de-titel-en-rubrieken","title":"De titel en rubrieken.","text":"<p>De pagina heeft nu niet een heel nieuwswaardige uitstraling: overal is het lettertype hetzelfde en om historische redenen is het gebruikelijk dat nieuws overtuigende overkomt wanneer in ieder geval de titel van de site een schreefletter heeft. Bovendien is het stom dat deze tekst r\u00fccktsichlos gecenteerd wordt.</p> <p>Lijn zowel de titel als de rubrieken links uit. Geef de titel ('Het Nieuws') een schreefletter, bijvoorbeeld een Garamond of Baskerville. Zorg er daarbij voor dat er altijd kan worden teruggevallen op het systeem-lettertype met schreef. Zet tenslotte, nu je toch bezig bent, door middel van css de titel om in bovenkast (kapitalen, hoofdletters).</p> <p>Voorzie de verschillende links in de rubrieke van wat meer ruimte, zodat het geheel een wat professionelere uitstraling krijgt.</p> <p>Zoals je ziet hebben zowel de titel als de rubrieken een klasse <code>shadow-divider</code>. Maak van dit gegeven gebruik om deze elementen wat duidelijker voor het voetlicht te brengen; denk hierbij aan de <code>gradient</code>, <code>box-shadow</code> of <code>transform</code> die we tijdens het plenaire deel hebben laten zien.</p> <p>Box shadow</p> <p>Bekijk ook deze tool om een fraaie box-shadow te cre\u00ebren.</p> <p></p>"},{"location":"week2/practicum.html#flexibele-vormgeving","title":"Flexibele vormgeving","text":"<p>Momenteel is de site niet echt flexibel: de inhoud past zich niet aan aan de grootte van het scherm (de 'viewport') omdat de breedte van de <code>div</code>s hard in pixels is gecodeerd. Dit heeft tot gevolg dat gedeelten van de site buiten beeld komen wanneer je de schermgrootte verandert.</p> <p></p> <p>Tijdens het plenaire deel hebben we gesproken over de css-units <code>vw</code> en <code>vh</code>. Maak van deze properties gebruik zodat de artikelen zo'n tweederde van de schermbreedte gebruiken en de sidebar de resterende eenderde voor z'n rekening neemt. Hou wel in de gaten dat de afbeeldingen bij de artikelen meeschalen. Check je uitwerking door je schermgrootte te vergroten en te verkleinen.</p> <p></p>"},{"location":"week2/practicum.html#blurring-the-images","title":"Blurring the images","text":"<p>Om de site wat moderner te maken, gaan we de plaatjes bij de nieuwsitems animeren. Maak gebruik van <code>filter:blur(10px)</code> om deze afbeeldingen van scherp naar vaag en weer omgekeerd vorm te geven. Maak een animatie waarbij dit elke vier seconden gebeurt.</p> <p>Intensief</p> <p>Let op: je kunt gekke en leuke dingen doen met <code>blur</code>, maar hou er rekening mee dat dit behoorlijk processor-intensief is. Zie deze discussie op StackOverflow. Denk ook aan de experimenten met Lighthouse die we vorige week gedaan hebben. Hou er rekening mee dat site normaliter primair bedoeld is om informatie over te dragen en dat dit soort grappige effecten het best spaarzaam ingezet worden.</p> <p></p>"},{"location":"week2/practicum.html#de-sidebar-beter-maken","title":"De sidebar beter maken","text":"<p>Tot nu toe hebben we ons op de artikelen zelf gericht, maar de sidebar behoeft ook enige aandacht. Realiseer de volgende punten:</p> <ul> <li>de tekst van de elementen in de sidebar is gecenteerd</li> <li>de verschillende elementen hebben zo'n 50px afstand tot elkaar</li> <li>aan de bovenkant wordt een gekleurd balkje gezet</li> <li>knoppen in de sidebar hebben een speciale achtergrond- en letterkleur</li> <li>achtergrondkleur van die elementen is lichtgrijs </li> </ul> <p>Let op: je moet voor alle kleuren die je gebruikt een variabele maken en die gebruiken met behulp van <code>var</code>.</p>"},{"location":"week2/practicum.html#3-media-queries","title":"3. Media queries","text":""},{"location":"week2/practicum.html#breedte-aanpassen","title":"breedte aanpassen","text":"<p>De artikelen en de sidebar blijven nu altijd de beschikbare breedte verdelen. Dit is niet handig wanneer dit erg klein dreigt te worden. Zorg er met behulp van een Media Query voor dat de rechterkolom verdwijnt (onder de artikelen wordt gezet) wanneer de breedte van het scherm minder is dan 750px.</p>"},{"location":"week2/practicum.html#darkmode-toevoegen","title":"darkmode toevoegen","text":"<p>Veel mensen hebben hun computer tegenwoordig standaard op dark mode staan, waarbij de achtergrond donker is en de letters licht. Maak gebruik van een Media Query om dit ook voor onze site te realiseren. Je hoeft hierbij niet alle kleuren van een donkere en lichte variante te voorzien: het volstaat dat je de achtergrondkleur van de pagina zelf aanpast en de kleur van de letters, zodat alles nog wel leesbaar blijft.</p> <p></p> <p>dark mode</p> <p>Hoewel dark mode tegenwoordig behoorlijk populair is, is er weinig wetenschappelijk bewijs te vinden waaruit zou blijken dat dit beter zou zijn voor je ogen. Het kan er wel voor zorgen dat je batterij wat langer meegaat. Zie bijvoorbeeld dit artikel op visioncenter.com, of dit stuk op howtogeek.com.</p> <p>Testen van darkmode</p> <p>In Google Chrome kun je goed de verschillende renderingen voor dark of light mode testen. Klik in de inspector tools op de drie puntjes naar de console-tab. Hier kun je het tabblad <code>Rendering</code> kiezen. In dat tabblad kun je vervolgens het color-scheme selecteren.</p> <p></p>"},{"location":"week2/practicum.html#4-flexbox","title":"4. Flexbox","text":"<p>Tijdens het hoorcollege zijn verschillende waarden van <code>display</code> besproken (zie eventueel nog de documentatie op MDN). Voor de opzet van onze website is het gebruik van de <code>flexbox</code> eigenlijk het meest voor de hand liggend: dan worden de artikelen vanzelf <code>flexbox-item</code>s en kun je er voor zorgen dat deze netjes en direct onder elkaar worden weergegeven.</p> <p>Pas de css aan, zodat hierbij gebruik gemaakt wordt van de <code>flexbox</code>.</p>"},{"location":"week3/index.html","title":"Week 3: Javascript","text":"<p>Deze week verlaten we het meer user-design gerichte onderwerp en gaan we in op het interactief maken van onze webpagina's. Dat doen we met behulp van de meest populaire programmeertaal volgens StackOverflow: JavaScript. We bespreken het domein waarin deze taal voorkomt, waarin hij verschilt van de andere talen die al besproken zijn (met name op het gebied van syntax, maar toch zeker ook op met betrekking op missie en doel) en hoe je een project hiermee zou kunnen opzetten.</p>"},{"location":"week3/index.html#hoorcollege","title":"Hoorcollege","text":"<p>Na een zeer korte historische inleiding bespreken we de rol en positie die JavaScript inneemt in het hedendaagse vakgebied in het algemeen en in web-development in het bijzonder. We laten zien hoe JavaScript wordt uitgevoerd en welke gevolgen dat heeft voor de ontwikkeling. Vervolgens gaan we in op client-side scripting met JavaScript, en bespreken we onder andere syntax, variabelen, verschillende data types, functies, objecten, events en loops. Ook behandelen we DOM manipulation: het aanpassen van de HTML elementen in de Document Object Model met behulp van bijvoorbeeld een query selector.</p> <p>Aan de hand van live coding laten we tenslotte zien hoe je een frontend-project opzet, wat een goeie manier van werken is en tegen welke problemen je aan zult (kunnen) lopen.</p> <p></p>"},{"location":"week3/index.html#practicum","title":"Practicum","text":"<p>In het practicum gaan we de theoretische kennis op een praktische manier toepassen. Aan de hand van kleine concrete opdrachten worden de belangrijkste concepten en constructies ge\u00efllustreerd. Hierbij zal met name stilgestaan worden bij enerzijdss eigenschappen die JavaScript uniek maken en anderzijds een vergelijking met reeds besproken talen gemaakt worden.</p> <p>Tijdens dit practicum zullen methoden en technieken besproken worden die nodig zijn voor het memory-spel.</p>"},{"location":"week3/index.html#literatuur","title":"Literatuur","text":"<p>Er is de wereld aan literatuur over JavaScript te vinden. Zelf vinden we de serie You Don't Know JS van Kyle Simpson erg fijn: hij bespreekt de echte ins en outs van deze taal. Deze hele serie is verkrijgen bij de Hanze Mediatheek</p> <p>Natuurlijk kun je ook op w3schools een goeie introductie krijgen van hoe en wat in JavaScript. Het nadeel van deze site is dat het niet heel diep gaat en een beetje cherry picking blijft.</p> <p>Wat dat betreft kun je, als altijd, beter te rade gaan bij MDN. Als feitelijke makers van JavaScript houden ze ook de documentatie hiervan goed bij.</p> <p>Als je op zoek bent naar een online training op het gebied van JavaScript (of een andere front-end techniek) dan raden we je Frontend Masters aan. </p>"},{"location":"week3/memory.html","title":"Memory week 3","text":"<p>Tot nu toe had het memory spel nog geen interactie en functionaliteit: het ziet er wel mooi uit, maar de kaarten kunnen nog niet omgedraaid worden en de score wordt nog niet bijgehouden. Maar dat ga je vanaf nu veranderen; je gaat met Javascript aan de slag. Voeg de volgende functionaliteiten toe aan het spel:</p> <ul> <li>Bij het begin van het spel worden in eerste instantie willekeurig letters uit het alfabet gekozen (later zullen we dit nog aanpassen). Zorg ervoor dat er de helft zoveel willekeurige letters worden gekozen als er kaarten zijn.</li> <li>De speler klikt op een gesloten kaart: de kleur van de kaart verandert in de kleur die bij open hoort en de letter die bij deze kaart hoort wordt weergegeven.</li> <li>Vervolgens klikt de speler op een andere gesloten kaart. Ook deze kaart verandert van kleur en de bijhorende letter wordt getoond.</li> <li>Als beide letters gelijk zijn worden de letters in deze cellen permanent getoond. De kleur van de kaarten wordt weer veranderd, om duidelijk te maken dat ze gevonden zijn.</li> <li>Als beide kaarten verschillende letters bevatten, blijven de kaarten open staan.</li> <li>Wanneer er op dat moment op een andere kaart geklikt wordt, worden beide geopende verschillende kaarten weer omgedraaid en de nieuwe kaart getoond.</li> <li>Wanneer een speler op een al omgedraaide kaart klikt gebeurt er niets.</li> <li>Als alle kaarten zijn omgedraaid, wordt de speler gefeliciteerd. Bedenk zelf een fijne manier om dit te doen.</li> </ul>"},{"location":"week3/practicum.html","title":"Week 3 - JavaScript","text":"<p>Deze week gaan we verder met de nieuwssite waar we vorige week ook mee hebben gewerkt. We gaan met JavaScript deze site 'tot leven wekken' in de verschillende oefeningen. Bij elke oefening is het de bedoeling dat je all\u00e9\u00e9n JavaScript schrijft, alle benodigde HTML en CSS is namelijk al gegeven.</p> <p>Download deze zip, pak hem uit en open <code>index.html</code> in een browser. Je hoeft dit niet per se via een server te doen: omdat alles wat we doen in de browser gebeurt, hoef je geen echte verbinding met een backend te hebben.</p>"},{"location":"week3/practicum.html#1-date","title":"1. Date","text":"<p>Net boven het featured artikel staat een datum. Deze staat hardcoded in de HTML. Zorg er met het <code>Date</code> object voor dat hier altijd de datum van vandaag wordt getoond in hetzelfde format als de datum die er nu hardcoded in staat. Gebruik hiervoor <code>toLocaleDateString</code> en geef de juiste opties mee. Gebruik vervolgens <code>innerHtml</code> om de datum in het juiste HTML element te tonen.</p> <p></p>"},{"location":"week3/practicum.html#2-timing-events","title":"2. Timing Events","text":""},{"location":"week3/practicum.html#2a-automatisch-wisselen-tussen-featured-artikelen","title":"2a. Automatisch wisselen tussen featured artikelen","text":"<p>Momenteel is er maar \u00e9\u00e9n featured artikel bovenaan de lijst met nieuwsartikelen te zien. Zorg ervoor dat deze elke 7 seconden afwisselt met de andere featured artikelen. De andere staan wel in het HTML document, maar staan momenteel nog op <code>display: hidden</code>. Je hebt <code>getElementsByClassName</code> nodig om de lijst van featured artikelen te selecteren. Met een <code>setInterval</code> kun je vervolgens door deze lijst heen for-loopen. Maak vervolgens bij elke keer dat het interval 'af gaat' \u00e9\u00e9n artikel zichtbaar, en verstop de rest.</p>"},{"location":"week3/practicum.html#2b-een-irritante-pop-up-tonen-na-10-seconden","title":"2b. Een irritante pop-up tonen na 10 seconden","text":"<p>In het HTML bestand staat een element met id <code>subscription-pop-up</code>. Deze is nu nog niet zichtbaar (<code>display: none</code>). Zorg ervoor dat deze 10 seconden na het openen van de pagina zichtbaar wordt met een <code>setTimeout</code>. Zodra je de pop-up zichtbaar hebt gemaakt, zorg dan ook dat het scrollen even niet mogelijk is door <code>overflow</code> toe te voegen aan de gehele <code>body</code>. Voeg ook een <code>EventListener</code> toe voor het <code>click</code> event van de knop met id <code>reject-subscription</code> om te zorgen dat de pop-up weer verdwijnt.</p> <p></p>"},{"location":"week3/practicum.html#3-user-events-30-minuten","title":"3. User Events (30 minuten)","text":""},{"location":"week3/practicum.html#3a-ondertitel-tonen-bij-hover-over-featured-artikel","title":"3a. Ondertitel tonen bij hover over featured artikel","text":"<p>Net zoals de 'listed' artikelen, heeft hebben de 'featured' artikelen een ondertitel. Deze staan al in de HTML, maar zijn nog niet zichtbaar. Zorg ervoor dat de ondertitels zichtbaar worden zodra de muis over het artikel zweeft. </p> <p>meerdere featured artikelen</p> <p>Let op: aangezien er meerdere featured artikelen zijn, kun je geen id toekennen aan het element waar de ondertitel in staat. Maak daarom gebruik van <code>getElementsByClassName</code> en voeg een <code>EventListener</code> toe aan alle artikelen dat gebruik maakt van de <code>mouseover</code> en <code>mouseleave</code> events. Zorg er vervolgens voor dat je op het juiste moment de CSS class <code>visible</code> aan de ondertitel toevoegt of juist verwijdert.</p> <p> </p>"},{"location":"week3/practicum.html#3b-een-irritante-pop-up-tonen-bij-eerste-keer-scrollen","title":"3b. Een irritante pop-up tonen bij eerste keer scrollen","text":"<p>In het HTML bestand staat een element met id <code>cookies-pop-up</code>. Deze is nu nog niet zichtbaar (<code>display: none</code>). Zorg ervoor dat deze zichtbaar wordt bij de eerste keer scrollen. Voeg hiervoor een <code>EventListener</code> toe voor het <code>scroll</code> event aan de gehele pagina. Zodra je de pop-up zichtbaar hebt gemaakt, zorg dan ook dat het scrollen even niet mogelijk is door <code>overflow</code> toe te voegen aan de gehele <code>body</code>. Voeg ook een <code>EventListener</code> toe voor het <code>click</code> event van de knop met id <code>accept-cookies</code> om te zorgen dat de pop-up weer verdwijnt. Zorg dan ook dat de <code>EventListener</code> voor <code>scroll</code> verwijderd wordt, zodat je niet oneindig koekjes moet blijven accepteren...</p> <p></p>"},{"location":"week3/practicum.html#4-forms","title":"4. Forms","text":"<p>De poll over de coronamaatregelen heeft momenteel nog geen functionaliteit, maar met JavaScript kunnen we ervoor zorgen dat je client-side kunt stemmen. Je hoeft geen extra HTML elementen toe te voegen of aanpassingen daarin te doen, de benodigde elementen staan al voor je klaar.</p> <p></p>"},{"location":"week3/practicum.html#4a-de-resultaten-client-side-opslaan","title":"4a. De resultaten client-side opslaan","text":"<p>De eerste stap is het opslaan van de resultaten in de <code>localStorage</code>. In het <code>form</code> element zie je dat de poll uit drie opties bestaat die elk een uniek id bevatten. Maak gebruik van een <code>EventListener</code> dat luistert naar het <code>submit</code> event van het <code>form</code> element. Tel vervolgens het aantal stemmen per optie en bewaar de resultaten in de <code>localStorage</code>. Voor deze stap is het genoeg om de resultaten uit te printen in de console. </p> <p></p>"},{"location":"week3/practicum.html#4b-resultaten-laten-zien-zodra-er-gestemd-is","title":"4b. Resultaten laten zien zodra er gestemd is","text":"<p>De volgende stap is het tonen van de resultaten die je al hebt kunnen opslaan in de <code>localStorage</code>. Onder het element waar de poll in staat, zie je een element met id <code>poll-results</code>. Deze kun je gebruiken om op de juiste plek met <code>innerHTML</code> de resultaten toe te voegen nadat er gestemd is. </p> <p></p>"},{"location":"week3/practicum.html#4c-het-formulier-valideren","title":"4c. Het formulier valideren","text":"<p>Nu ga je valideren of de gebruiker \u00fcberhaupt een optie heeft aangevinkt, voordat we de resultaten tonen. Zo lang de gebruiker nog niets heeft aangevinkt, maar wel de stemknop gebruikt, mogen de resultaten nog niet worden getoond, en verschijnt er een foutmelding. De foutmelding staat al in het HTML document en heeft als id <code>form-warning</code>. </p> <p></p>"},{"location":"week3/practicum.html#4d-teruggaan-naar-de-poll","title":"4d. Teruggaan naar de poll","text":"<p>In de laatste stap zorg je ervoor dat je met de knop \"Terug naar poll\" de poll weer te zien krijgt in plaats van de resultaten, zodat je opnieuw kunt stemmen (en vals kunt spelen?). Voeg hiervoor een <code>EventListener</code> toe aan de knop, en schrijf een functie waarmee je de zichtbaarheid van poll vs resultaten kan toggelen.</p>"},{"location":"week3/practicum.html#5-animaties","title":"5. Animaties","text":""},{"location":"week3/practicum.html#5a-bewegend-chat-icoontje","title":"5a. Bewegend chat icoontje","text":"<p>Rechts onderaan de pagina zie je een chat icoontje. Zorg met een <code>setInterval</code> dat elke 0,1 seconde de hoogte van het icoon wordt aangepast zodat het icoontje continu groter en dan weer kleiner wordt. Dat betekent dat je in een variabele bijhoudt welke richting het icoon op beweegt om te kunnen bepalen of je een pixel erbij moet optellen of juist aftrekken.</p> <p></p>"},{"location":"week3/practicum.html#5b-bij-hover-over-artikel-doorzichtigheid-van-overige-artikelen-animeren","title":"5b. Bij hover over artikel, doorzichtigheid van overige artikelen animeren","text":"<p>Alle 'listed' artikelen hebben dezelfde class, namelijk <code>listed</code>. Zorg ervoor met <code>getElementsByClassName</code> dat deze artikelen de class <code>see-through</code> krijgen die de doorzichtigheid van de artikelen animeert, zodra je over een artikel hovert met de muis. Doe dit alleen niet voor het artikel waarover je hovert. Hierdoor krijgt het geselecteerde artikel de focus. Zodra de muis over geen enkel artikel zweeft, verdwijnen alle animaties. Doe dit met <code>getElementsByClassName</code>, <code>EventListeners</code> en een aantal for loops.</p> <p></p>"},{"location":"week4/index.html","title":"Week 4: Javascript async","text":"<p>Nadat vorige week de basis is gelegd, gaan we deze week in op \u00e9\u00e9n van de meest fundamentele eigenschappen van Javascript: asynchroon programmeren. </p> <p>De meeste programmeertalen die je tot nu toe in de opleiding bent tegengekomen gaan in basis uit van een call stack waarbij functies of methoden elkaar aanroepen en wachten totdat die call is afgerond voordat de caller zelf door kan gaan. JavaScript is van meet af aan ingesteld op het werken met calls die lange tijd in beslag kunnen nemen, bijvoorbeeld data ophalen over een netwerk. Om deze reden (en omdat Javascript altijd maar in \u00e9\u00e9n thread draait) heeft Brendan Eich al vanaf het prille begint gewerkt met zogenaamde callback functions. </p>"},{"location":"week4/index.html#hoorcollege","title":"Hoorcollege","text":"<p>In het hoorcollege wordt de theorie van asynchroon programmeren toegelicht. We bespreken de noodzaak van deze techniek en de verschillende manieren waarop aan deze noodzaak voldaan kan worden. Aan de hand van de werking van de callback queue en de event loop wordt toegelicht hoe functies conditioneel gemaakt kunnen worden \u2013 en hoe ze pas kunnen worden aangeroepen wanneer er aan die conditie voldaan is. We bespreken de theoretische werking van deze techniek en laten zien hoe deze concreet is gerealiseerd in de browser (in de V8-engine) en in nodejs.</p> <p>Vervolgens gaan we in op het concept van <code>Promises</code> en het aan elkaar rijgen van functie-aanroepen. We kijken naar goede architecturen om dit soort code effici\u00ebnt en leesbaar te maken.</p> <p></p>"},{"location":"week4/index.html#practicum","title":"Practicum","text":"<p>In het practicum wordt de theorie uit het hoorcollege praktisch uitgewerkt. Aan de hand van een aantal kleine specifieke opgaven wordt Javascript ingezet om data van externe bronnen op te halen en te verwerken. Hierbij maken we gebruik van technieken die zowel in de browser als op de command line werken. We kijken hoe we data uit verschillende bronnen tot \u00e9\u00e9n geheel kunnen integreren, zonder problemen te ondervinden van latency of kapotte links.</p>"},{"location":"week4/index.html#literatuur","title":"Literatuur","text":"<ul> <li> <p>Simpson, Kyle (2015), Async and Performance. Uit de (aan te raden) serie You Don't Know JavaScript. Dit boek is (min of meer) eenvoudig via de Hanze mediatheek te vinden.</p> </li> <li> <p><code>fetch</code> op MDN</p> </li> </ul>"},{"location":"week4/memory.html","title":"Week 4 - Memory 2 - tweede toetsmoment","text":""},{"location":"week4/memory.html#memory-2","title":"Memory 2","text":"<p>Voor dit toetsmoment moeten alle functionele eisen die in week drie besproken zijn gerealiseerd zijn.</p> <p>Toevoeging voor deze week is om afbeeldingen uit externe API's te gebruiken, in plaats van letters uit het alfabet. Denk hierbij bijvoorbeeld aan:</p> <ul> <li> <p>Lorem Picsum</p> </li> <li> <p>DogAPI</p> </li> <li> <p>The Cats API</p> </li> </ul> <p>Maar andere externe api's zijn natuurlijk ook mogelijk. Voeg een keuze-optie toe waarmee de speler kan kiezen wat voor soort plaatjes hij of zij op de kaartjes wil zien:</p> <p></p> <p>Maak gebruik van <code>Promise</code> en <code>fetch</code> voor het ophalen van de afbeeldingen. </p> <p>Zorg er voor dat de gesloten kaarten ook de kleur krijgen die de speler met de color picker heeft uitgezocht. Ook tijdens het spelen moet je deze kleur kunnen aanpassen.</p> <p>Beoordeling</p> <p>Naast de functionaliteit blijven we ook de leesbaarheid en netheid van je code beoordelen. Ook blijft accessibility en responsiveness belangrijk. Gebruik geen libraries en frameworks.</p>"},{"location":"week4/memory.html#leesopgaven","title":"Leesopgaven","text":"<ol> <li> <p>Lees hoofdstuk 2.5 van het proefschrift JavaScript: an analysis of the language and its impact on web development door Thomas Henson (of hier offline). Welke methode wordt er voornamelijk beschreven om een idee te krijgen bij de impact van JavaScript op webpagina's? Voer deze methode zelf ook uit in je browser en bekijk vier van je favoriete websites. Wat valt je op?</p> </li> <li> <p>Lees hoofdstuk 2.7 \"Will it still be relevant in the future?\" van hetzelfde proefschrift. Beschrijf \u00e9\u00e9nn van de redenen die de schrijver noemt waardoor er andere talen dan JavaScript worden overwogen voor het web. Denk je dat dit inderdaad een belangrijke reden is om JavaScript te vervangen? En waarom?</p> </li> </ol>"},{"location":"week4/practicum.html","title":"Practicum week 4","text":"<p>Deze week gaan we werken met <code>fetch</code> en met <code>Promises</code>. We bouwen daarbij verder op de technieken die we in de vorige weken hebben besproken en waar we mee hebben geoefend. De bestanden voor deze week vind je in deze zip.</p>"},{"location":"week4/practicum.html#1-promises","title":"1: Promises","text":""},{"location":"week4/practicum.html#1a-omzetten-van-code-in-promises","title":"1a: Omzetten van code in promises.","text":"<p>Run en bestudeer het bestand <code>cards.html</code>. Hierin maken we gebruik van weer een API om een spel kaarten sequentieel op te halen. Hoewel deze code op zich nog redelijk overzichtelijk is, is het toch beter om dit om te zetten in een wat hedendaagsere manier van werken. Herschrijf deze code waarbij je gebruik maakt van <code>Promise</code>s.</p> <p></p>"},{"location":"week4/practicum.html#1b-omzetten-van-een-callback-hell-in-promises","title":"1b: Omzetten van een callback-hell in promises","text":"<p>Run en bekijk het bestand <code>numbers.html</code>. Zoals je ziet wordt hier gebruik gemaakt van een externe API om interessante gegevens van een nummer op te halen. Bestudeer met name de werking van de functie <code>getjson()</code>.</p> <p>Deze methode wordt uitgebreid gebruikt in het stukje javascript dat hier onder staat. Je kunt je voorstellen dat dit niet heel handig is, qua broncode. Herschrijf deze code in de vorm van promises. Maak hierbij gebruik van <code>Promises.all</code>.</p> <p>Pas vervolgens de pagina aan zodat de bezoeker een getal kan invullen waar hij of zij interessante gegevens van te zien wil krijgen (momenteel is dat getal hard gecodeerd in <code>const favoriteNumber</code>). Maak ook een dropdown om een keuze te bieden van het aantal gegevens dat er opgehaald worden. Je hoeft je niet druk te maken over mogelijke dubbele gegevens die over het getal worden getoond (maar dat mag natuurlijk wel).</p> <p></p>"},{"location":"week4/practicum.html#2-een-spinner","title":"2: een spinner","text":"<p>Open het bestand <code>scroller.html</code> en bestudeer de werking hiervan. Zoals je ziet maken we gebruik van een <code>grid-view</code> om een grid van twee kolommen met plaatjes te laten zien. Op \u00e9\u00e9n na zijn al deze plaatjes momenteel een spinner, die duidelijk maakt dat er nog geen plaatje is ingeladen.</p> <p>Het is de bedoeling om wanneer de DOM is ingeladen de spinners te vervangen door echte plaatjes. Je kunt gebruik maken van de site https://picsum.photos/: dit is een site waar je automatisch willekeurige plaatjes vandaan kunt halen. Maak gebruik van <code>fetch</code> en promises.</p> <p></p>"},{"location":"week4/practicum.html#3-oneindige-scroll","title":"3: Oneindige scroll","text":"<p>Zoals je ziet staat de laatste regel plaatjes iets onder de viewport. Het is de bedoeling dat er een nieuwe regel met twee willekeurige plaatjes aan de DOM wordt toegevoegd op het moment dat deze laatste regel helemaal in de viewport terecht is gekomen. Door dit telkens te doen kunnen we een oneindige scroll maken.</p> <p>De regel die je moet toevoegen is al voor je voorbereid in de html: we maken hier gebruik van de <code>template</code>-node. Maak gebruik van de methode <code>importNode</code> om deze node te laden op het moment dat de laatste regel helemaal te zien is. Pas van beide plaatjes in deze template de <code>src</code> aan en voeg het geheel toe aan de <code>container</code>. </p> <p><code>style</code> en <code>computedStyle</code></p> <p>In deze opgave moet je de css met behulp van JavaScript aanpassen. Op zich is dat niet heel lastig, maar het kan zinvol zijn je te realiseren dat er een verschil bestaat tussen de <code>style</code> en de <code>computedStyle</code> van een <code>node</code>. Lees eventueel de documentatie op MDN om een idee te krijgen van de verschillen tussen deze twee.</p>"},{"location":"week5/index.html","title":"Week 5: Beveiliging en jwt","text":"<p>Zo gauw een applicatie data van een andere computer haalt dan waarop deze zelf draait, of zo gauw je een applicatie via een netwerk aan andere computers beschkbaar stelt, krijg je te maken met beveiliging: hoe voorkom je dat kwaadwillenden beschikking krijgen over de data of over de code-base zelf. Omdat het web inmiddels volledig als applicatieplatform gezien wordt, zijn deze vragen voor dit thema bijzonder relevant.</p> <p>Vanzelfsprekend gaan we niet in op alle aspecten van beveiliging: daar is immers een hele eigen opleiding voor. We beperken ons tot de meest voor de hand liggende zaken die elke goede (web)-programmeur zou moeten inzetten om de applicaties op z'n minst een beetje te beschermen. Specifiek gaan we in op een techniek die sinds enige jaren hier veel voor wordt gebruikt: json web tokens.</p>"},{"location":"week5/index.html#hoorcollege","title":"Hoorcollege","text":"<p>Na een korte introductie over beveiliging bespreken we methoden en technieken waarmee webapplicaties veiliger gemaakt kunnen worden. Hierin passeren zaken als <code>password hashing</code>, het toevoegen van <code>salt</code> en <code>2FA</code> de revue. In aansluiting hierop gaan we in op de problemen die met al deze technieken samenhangen en waarvoor <code>json webtokens</code> (<code>JWT</code>) een oplossing probeert te formeren.</p> <p>Aansluitend gaan we uitgebreid in op <code>JWT</code>. We bespreken de technische voordelen hiervan en laten een concrete implementatie zien. </p> <p></p>"},{"location":"week5/index.html#practicum","title":"Practicum","text":"<p>In het practicum gaan studenten zelf aan de slag met kleine concrete praktische opgaven. Er wordt met Javacript connectie gemaakt met een (gegeven) JWT-server, waarna gekeken wordt hoe voorkomen kan worden dat het token te lang niet wordt ververst, of wat er aan te doen valt wanneer dat wel het geval is.</p> <p>Tijdens dit practicum zal ook gekeken worden naar de voor- en nadelen van opslag van het token in een <code>cookie</code> of in de <code>local storage</code>. Dit biedt als extra'tje de mogelijkheid om te onderzoeken hoe data in de <code>local storage</code> kan worden opgeslagen en geadresseerd. Ook bespreken we hoe het token in de http-header van de request kan worden meegestuurd. </p>"},{"location":"week5/index.html#literatuur","title":"Literatuur","text":"<ul> <li> <p>RFC 8725: JWT Best Current Practices</p> </li> <li> <p>How hackers hack JWT</p> </li> </ul>"},{"location":"week5/memory.html","title":"Memory week 5: JWT (toetsmoment)","text":"<p>Voor dit oplevermoment moet het mogelijk zijn met een backend te communiceren. Hiervoor maken we gebruik van dezelfde backend als die we bij het practicum hebben gebruikt. Het is hierbij niet de bedoeling dat je aanpassingen aan deze backend gaat doen (maar zie de opmerking bij het practicum zelf), maar dat je alles regelt vanaf de voorkant.</p> <ul> <li> <p>Zorg ervoor dat de top vijf (of hoeveel je maar laat zien) die je bij het memory-spel laat zien daarwerkelijk de top vijf is die op de backend geregisteerd is.</p> </li> <li> <p>Maak een pagina waarmee een speler zich bij deze backend kan registeren.</p> </li> <li> <p>Maak een andere pagina waarop de speler zich kan aanmelden. De backend geeft bij correcte gegevens een JWT token terug dat standaard een TTL heeft van 3600 seconden.</p> </li> <li> <p>Sla het JWT op in de <code>localStorage</code> en zorg ervoor dat dit bij elke request naar de backend in de header wordt meegestuurd.</p> </li> <li> <p>Maak een nieuwe pagina waarop de speler zijn of haar voorkeuren kan opgeven. Deze voorkeuren bestaan uit de favoriete plaatjes-API, de kleur voor gevonden kaartjes en de kleur voor gesloten kaarten.</p> </li> <li> <p>Het moet voor de speler ook mogelijk zijn het opgegeven e-mailadres te wijzigen. Dat kun je op dezelfde pagina doen als waar de voorkeuren worden bijgehouden, of je kunt hier weer een nieuwe pagina voor maken.</p> </li> <li> <p>Als de TTL van het JWT verlopen is, moet de speler een melding krijgen en naar de loginpagina verwezen worden. Tip: om dit te testen kun je de TTL in symfony aanpassen. Voeg daarvoor in <code>config/packages/lexik_jwt_authentication.yaml</code> een key <code>token_ttl</code> toe met een waarde in seconden:</p> </li> </ul> <pre><code>lexik_jwt_authentication:\nsecret_key: '%env(resolve:JWT_SECRET_KEY)%'\npublic_key: '%env(resolve:JWT_PUBLIC_KEY)%'\npass_phrase: '%env(JWT_PASSPHRASE)%'\ntoken_ttl: 300\n</code></pre> <p>Bestudeer eventueel de documentatie van de LexikJWTAuthenticationBundle om een beeld te krijgen van de werking hiervan.</p>"},{"location":"week5/memory.html#leesopdracht","title":"Leesopdracht","text":"<p>TBD</p>"},{"location":"week5/practicum.html","title":"Practicum week 5","text":"<p>Tijdens dit practicum (en bij het oplevermoment dat erbij hoort) maken we gebruik van een backend dat gemaakt is in php met symfony. Clone de repo en volg de instructies in de bijgevoegde <code>README.md</code> om de boel aan de praat te krijgen.</p> <p>Alleen op de frontend</p> <p>Het is de bedoeling dat je alleen aan de frontend werkt. We hebben die backend juist gemaakt om de situatie te simuleren waarin je als developer geen mogelijkheid hebt om een deel van de applicatie (de backend in dit geval) zelf aan te passen.</p> <p>Dat gezegd hebbende is het best mogelijk dat je dingen in de backend tegenkomt die echt beter moeten. We hebben dat ding redelijk snel in elkaar gezet, dus we doen geen enkele garantie over hoe goed het is. Het staat je dus zeker vrij om dit aan te passen en een pull-request te doen.</p>"},{"location":"week5/practicum.html#1-opwarmen-javascript-arrays","title":"1. Opwarmen - JavaScript arrays","text":"<p>We beginnen met wat opwarmoefeningen om wat meer inzicht te krijgen in fundamentele JavaScript array-functies. Tijdens het plenaire deel is het \u00e9\u00e9n en ander hieromtrent gedemonstreerd; het is de bedoeling dat je hier nu zelf mee aan de gang gaat.</p> <p>Gegeven de onderstaande array <code>arr</code>. </p> <pre><code>let arr = [4,12,4,32,5,1,2,4,5,3,2,1,5,3,2,6,4,23,25,57,78,33,42,65,2,16,85,12,87,23,87,23,87,98,23,6,23,65,87,98,1]\n</code></pre>"},{"location":"week5/practicum.html#1a","title":"1a","text":"<p>Maak gebruik van de methode <code>filter</code> om een nieuwe array te maken die alleen de elementen uit <code>arr</code> bevat die deelbaar zijn door 3.</p>"},{"location":"week5/practicum.html#1b","title":"1b","text":"<p>Maak gebruik van de methode <code>map</code> om een nieuwe array te maken die alle elementen uit <code>arr</code> verdubbeld bevat.</p>"},{"location":"week5/practicum.html#1c","title":"1c","text":"<p>Maak gebruik van de methode <code>sort</code> om een nieuwe array te maken die de elementen uit <code>arr</code> gesorteerd (van hoog naar laag) bevat</p>"},{"location":"week5/practicum.html#1d","title":"1d","text":"<p>Maak gebruik van de methode <code>reduce</code> om het totaal van alle elementen uit <code>arr</code> te bepalen</p>"},{"location":"week5/practicum.html#2-aggregeren-en-weergeven-van-data-van-de-backend","title":"2. Aggregeren en weergeven van data van de backend","text":"<p>Download het bestand week5.zip en pak dit op een logische locatie uit. Deze zip bevat een php bestand <code>get-data.php</code> dat een suggestie wekt van spelers-namen met de scores van de spellen die hebben gespeeld. Bestudeer de code om een beeld te krijgen van de werking hiervan. De zip bevat ook een html bestand waarin gevraagd wordt op gebruikersgegevens (gebruikersnaam en wachtwoord). De bedoeling van deze opgave is het weergeven van de top tien beste spelers met hun scores wanneer de opgestuurde gegevens correct zijn.</p> <p></p> <p>Start in deze directory een php-server zodat je beschikking hebt over het bestand <code>get-data.php</code> via een netwerk:</p> <pre><code>php -S localhost:8000\n</code></pre> <p>Begin met het afvangen van de normale flow van de html: er zit een submit-button in die standaard een <code>POST</code> request doet naar de <code>action</code>. In dit geval willen we de hele boel door JavaScript laten afhandelen, waarbij we de pagina zelf nooit hoeven te verlaten. Vervang dus de submit door een standaard knop en vang het <code>click</code> event op met een eventListener.</p> <p>Maak vervolgens gebruik van <code>FormData</code> om de ingevulde gegevens te serialiseren. Post deze gegevens naar <code>get-data.php</code>. Zorg er in eerste instantie voor dat de gegevens correct zijn (gebruikersnaam: 'Henk', wachtwoord 'OpDeTank').</p> <p>De backend geeft alle data van alle spelers terug. Maak gebruik van de kennis die je bij de eerste oefening hebt opgedaan om deze data om te zetten in een array van gebruikersnamen met hun totale score. Als je dit hebt gedaan, kun je deze nieuwe array sorteren op de individuele score van de spelers. Zorg er vervolgens voor dat je van deze nieuwe gesorteerde array alleen de eerste tien elementen overhoudt (zie hiervoor eventueel de methode <code>slice</code>).</p> <p>Itereer over deze laatste array en maak gebruik van de <code>template</code> met id <code>scores</code> om tien regels toe te voegen aan de gegeven tabel met id <code>players</code>. Zorg er tenslotte via css voor dat deze tabel ook daadwerkelijk wordt weergegeven.</p> <p>NumberFormat</p> <p>Maak gebruik van Intl.NumberFormat() om de (relatief grote) scores wat vriendelijker en leesbaarder weer te geven.</p>"},{"location":"week5/practicum.html#3-opvangen-van-verschillende-response-codes","title":"3. Opvangen van verschillende response codes","text":"<p>Zoals je kunt zien kan de backend nog twee andere respons codes teruggeven: <code>401 Unauthorized</code> en <code>400 Illegal request</code>. Zorg er voor dat de input-velden een dikke rode lijn krijgen wanneer de eerste fout optreedt.</p> <p></p> <p>Waarom is het onwaarschijnlijk dat in de huidige configuratie de tweede fout optreedt? In wat voor context zou dat wel kunnen, denk je?</p>"},{"location":"week5/practicum.html#4-opvangen-van-een-jwt-van-de-backend","title":"4. Opvangen van een JWT van de Backend","text":"<p>In deze en de volgende opgave gaan we gebruik maken van de backend voor het memory-spel. Clone deze repository op een handige plek en volg de instructies in de <code>README.md</code> om de boel aan de praat te krijgen. In de directory <code>create</code> vind je scripts (feitelijk <code>cURL</code> calls) die je kunt gebruiken om de installatie te testen. Bestudeer de scripts om een beeld te krijgen van hoe deze backend werkt. </p> <p>Verder maken we hier ook weer gebruik van dezelfde login-pagina als die je in de vorige opgave hebt gebruikt. Zorg ervoor dat je een nieuw JavaScript-bestand aan deze html koppelt. Je vind dit bestand ook in de directory <code>frontend</code> van de repo.</p> <p>Als je met goeie credentials op deze backend inlogt, krijg je json terug dat er als volgt uitziet (met een ander jwt, vanzelfsprekend):</p> <pre><code>{\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2NTQwNjQ5MzksImV4cCI6MTY1NDA2ODUzOSwicm9sZXMiOlsiUk9MRV9VU0VSIl0sInVzZXJuYW1lIjoiQ2hhbnRhbCJ9.RJVkBQfZ5DvNwjNlRxsVnQJagwIOwQvsbLGi9bI-rh4aOkzq6-oc3hESDVt-ibWVZSsj33ojdkft8bvUph1ylBrZbG0a96r-HdcHY-IyYaj_l-T_xT7epivvYafXejKRTSou-bBh1KiKhhSLrROjTsNu5CuhrG66qXpq_uLlBC1r4bYWzv6ekqqOAzqUqyBz40dBTkbLhpHFaor6dEO1rMf48AwBg41l4CWTChzTq7WPj_CR3UmETSPBnliTlmE7ge4Y_HjwTVRDvOHaNYZnc8L8h61yM2461h3liLYAEhDrzJ1aRKvuZxBC0wTHGLPmRUv5DbODAas2q7iGj9PVE_o3Y9mHVCKHFw_zqCxpmrcpnh874K9aly8rJYjvoFsEnWJXj976gz87a9nPlsetOyiCwU36aPgQ9ACHU3Lp7mEKQyooYrGz6Fpl_Kx7ii1shoUEumm_QCzZGAZbqAQJxFxJ5fVzcnuf-wVDvxtYCsfaHIRlac4knt14BTSI0JC0m-PWQ6O0PR6_OPrxm177s1QyyqXZgXvqbvHTB0jEd1Wv-znBDzD_mhdmcDvCXuv6hgVtGbvBWLdyQm3sxBMjfIstWCOhtMoTsNoihyHsrGZsYHQNUGW-2vBiii6r9dkaNCIOKJtW3EF_Nzw9WkfwG8lSYB9qcVuvrgO6uIYARvo\"}\n</code></pre> <p>Sla dit token op in de <code>localStorage</code> en geef een duidelijke melding aan de speler dat er is ingelogd. Check de <code>localStorage</code> via de <code>Application</code>-tab in de developer tools.</p> <p></p> <p>Wanneer de bezoeker de verkeerde gegevens (gebruikersnaam of wachtwoord) invult, moet daar ook een duidelijke melding van komen.</p> <p></p>"},{"location":"week5/practicum.html#5-meesturen-van-het-jwt-in-elke-request","title":"5. Meesturen van het JWT in elke request","text":"<p>De volgende stap is het meesturen van het jwt bij elke request. Je kunt hiervoor je eigen service maken die elk http-request ondervangt en het jwt injecteert, maar voor deze exercitie is het voldoende om het token handmatig toe te voegen in de headers.</p> <p>Voeg het jwt toe met de volgende syntax: <code>Authorization: Bearer &lt;token&gt;</code> (bekijk de documentatie op jwt.io; geen handige links in die pagina, maar ongeveer halverwege staat dit toegelicht). Doe een call naar <code>/api/player/{id}/games</code> om een overzicht te krijgen van de spellen die de speler met deze id heeft gespeeld (zoek zelf een bestaande id op in de database; het bijhorende wachtwoord vind je in <code>create/create_users.sh</code>). </p> <p>Vang de respons van de server op en toon deze weer netjes onder het login-scherm.</p> <p></p> <p>Datum Format</p> <p>Maak gebruik van <code>toLocaleDateString()</code> om de datum die je terugkrijg van de backend om te zetten in een iets vriendelijker en leesbaarder formaat.</p> <p></p>"},{"location":"week6/index.html","title":"Week 6: MVC en Frameworks 1","text":"<p>E\u00e9n van de problemen waar je mee te maken krijgt wanneer je serieus voor het web (en \u00fcberhaupt) gaat ontwikkelen is compartamentalisatie: hoe deel je je applicatie op zo'n manier in dat je enerzijds een wildgroei aan bestanden en scripts voorkomt en anderzijds klassen en objecten hebt die een duidelijke en afgebakende verantwoordelijkheid hebben (SOLID, kortom)?</p> <p>In deze en de volgende week gaan we in op methoden en technieken die hiervoor veelvuldig ingzet worden. We grijpen hier terug op het MVC-ontwerppatroon dat we in webtech2 uitgebreid hebben besproken. We kijken hoe dit patroon ingezet wordt in een web-omgeving en op welke manier dat de problemen op kan lossen.</p> <p></p>"},{"location":"week6/index.html#hoorcollege","title":"Hoorcollege","text":"<p>Het eerste hoorcollege van dit tweeluik radicaliseert de problemen die ontstaan wanneer er g\u00e9\u00e9n gebruik gemaakt wordt van compartimentalisatie (of MVC). Aan de hand van concrete voorbeelden wordt duidelijk gemaakt dat je al heel snel een onoverzichtelijke brij aan code, klassen en bestanden hebt die niet alleen slecht 'performt', maar ook nog een onleesbaar en dus ononderhoudbaar is. </p> <p>Hierna bespreken we verschillende manieren om deze problemen te voorkomen, waarbij we uiteindelijk uitkomen op het MVC-ontwerppatroon (of meer hedendaagse vormen daarvan). Tenslotte bespreken we hoe je dit patroon in kunt zetten in een JavaScript-ontwikkelproces.</p>"},{"location":"week6/index.html#practicum","title":"Practicum","text":"<p>In het practicum maken we gebruik van een bestaand framework (Angular) om MVC in een JavaScript-omgeving in te zetten. Aan de hand van concrete en kleine opdrachten wordt dit framework ge\u00efntroduceerd, en wordt toegelicht waarom dit een oplossing kan vormen voor de in het theoriecollege genoemde problematiek.</p> <p>Door de introductie van een dergelijk framework kan de ontwikkelstraat wel wat complexer worden. We laten methoden en technieken zien om met deze toegenomen complexiteit om te gaan.</p>"},{"location":"week6/index.html#literatuur","title":"Literatuur","text":"<p>Wikipedia over MVC</p> <p>We hebben ook vier screencasts gemaakt over werken met Angular. Zier hiervoor de onderstaande links. We raden je aan deze video's v\u00f3\u00f3r het practicum te bekijken.</p> <ol> <li> <p>Korte eerste inleiding in Angular. Opstarten en data laten zien.</p> </li> <li> <p>Het aanmaken van compomenten.</p> </li> <li> <p>Communicatie tussen componenten.</p> </li> <li> <p>Werken met Services</p> </li> </ol>"},{"location":"week6/memory.html","title":"Memory week 6: Geaggregeerde data","text":"<p>De symfony backend geeft ook geaggregeerde data terug. Het idee hiervan is dat een administrator (<code>ROLE_ADMIN</code>) van deze endpoints gebruik kan maken om te zien hoeveel spellen er gespeeld zijn, wie zich heeft aangemeld (voor irritante direct-marketing-doeleinden bijvoorbeeld) en welke API's populair zijn. In deze opdracht moet je de pagina voor de administrator maken. </p> <p>Maak gebruik van Angular om met behulp van de backend van de memory-game deze geaggregeerde data op te halen en in een fraaie visualisatie te tonen. Bekijk welke geaggregeerde data de backend teruggeeft om een idee te krijgen van de mogelijkheden (en als je een spannende toevoeging ziet, doe vooral een PR). </p> <p>Niet opnieuw bouwen</p> <p>Je hoeft dus niet het hele memory-spel opnieuw in Angular om te bouwen, maar je kunt hier natuurlijk wel een linkje naar de administrator-kant maken. </p> <p>Je bent vrij in de uitwerking en layout van de applicatie, dus leef je uit! Er moet wel een visualisatie inzitten, dus niet gewoon een row-dump van de data. Je mag zelf de visualisatie bedenken, of gebruik maken van de standaarden die in Angular zitten.</p> <p>Zie verder de uitgebreide omschrijving bij het toetsmoment.</p>"},{"location":"week6/practicum.html","title":"Practicum week 6","text":"<p>Deze week gaan we aan het werk met TypeScript en Angular. We beginnen met wat oefeningen op het gebied van TypeScript, zodat we dat later in kunnen zetten wanneer we een Angular-applicatie gaan opzetten.</p>"},{"location":"week6/practicum.html#typescript","title":"TypeScript","text":"<p>Zoals gezegd is TypeScript een strikte superset van JavaScript. Dat houdt in dat alle valide JavaScript ook valide TypeScript is, maar niet andersom.</p> <p></p>"},{"location":"week6/practicum.html#van-ts-naar-js","title":"Van TS naar JS","text":"<p>Omdat browsers geen TypeScript aankunnen, moet je je TypeScript-bestanden eerst omzetten naar JavaScript \u2013 een techniek die bekend staat als transpileren. Er zijn verschillende manieren om dat te doen, maar in dit practicum maken we gebruik van <code>tsc</code>. Om dit aan de praat te krijgen moet je even wat infrastructuur opzetten:</p> <pre><code># directory waar we gaan werken\nmkdir typescript\ncd typescript\n\n# initialiseren van npm met alle default-waarden\nnpm init -y\n\n# installatie van typescript\nnpm install typescript --save-dev\n\n# instalaltie van tsc\n# let op: dat npx is g\u00e9\u00e9n typfout\nnpx tsc --init\n</code></pre> <p>Vervolgens kun je de opgaven maken in <code>index.ts</code> en transpileren met <code>npx tsc</code>. Dat genereert een bestand <code>index.js</code> wat je vervolgens kun runnen met <code>node</code>.</p> <p>Niet altijd nodig</p> <p>Als we later met Angular gaan werken, wordt dit allemaal automatisch voor je gedaan. Mocht je het voor nu te veel gedoe vinden, kun je ook gebruik maken van de online editor die Microsoft aanbiedt.</p>"},{"location":"week6/practicum.html#1-de-stad","title":"1. De stad","text":"<p>We beginnen eenvoudig. Maak een klasse <code>Stad</code> die de onderstaande eigenschappen bevat. Zorg ervoor dat beide eigenschappen bij het aanmaken van een object van dit type moeten worden meegegeven. Maak <code>getters</code> voor beide eigenschappen.</p> naam type omschrijving naam string naam van de stad inwoners number aantal inwoners <p>Maak vervolgens de steden Groningen (250.000 inwoners), Winsum (7.500 inwoners) en Delfzijl (24.000 inwoners) aan. Maak gebruik van <code>map</code> en <code>reduce</code> om op basis van de <code>getter</code> van het inwoneraantal van alle drie de steden het totaal aantal inwoners van deze drie steden uit te printen. Transpileer je code en bestudeer het gegenereerde JavaScript-bestand. Run tenslotte dit bestand. Als het goed is komt er 281.500 uit.</p>"},{"location":"week6/practicum.html#2-interfaces","title":"2. Interfaces","text":"<p>E\u00e9n van de idee\u00ebn achter TypeScript is dat deze taal types toevoegt aan JavaScript. In deze opgave gaan we de klasse <code>Stad</code> uitbreiden met twee zelfgemaakte typen: <code>Park</code> en <code>Cafe</code>. Elke goede stad heeft een aantal parken en een aantal caf\u00e9's. Een park heeft een naam, een grootte en een aantal banken dat je in het park kunt vinden. Een caf\u00e9 heeft een naam, een aantal tafels en een lijst van bieren die je in dat caf\u00e9 kunt bestellen.</p> <p>Definieer de beide interfaces <code>Park</code> en <code>Cafe</code>, overeenkomstig de omschrijving die hierboven gegeven is. Voeg vervolgens een attribuut <code>parken</code> en <code>caf\u00e9s</code> (eventueel zonder accent aigue) toe aan de klasse <code>Stad</code>: aangezien steden meerdere parken en kroegen kunnen hebben, moet dit natuurlijk een lijst zijn. Voorzie daarom deze klasse van een methode <code>addCafe(c:Cafe)</code> en van een methode <code>addPark(p:Park)</code>. Maak ook <code>getters</code> voor beide attributen. Je kunt onderstaande code gebruiken om je uitwerking te testen.</p> <pre><code>groningen.addCafe({naam:\"De Minnaar\", bieren:[\"Jupiler\",\"Karmeliet\"], stoelen:20})\ngroningen.addCafe({naam:\"De Bres\", bieren:[\"Dommelsch\",\"Heineken\"],stoelen:13})\n\ngroningen.addPark({naam:\"Noorderplantsoen\", grootte:120, banken:20})\ngroningen.addPark({naam:\"Stadspark\", grootte:350, banken:10})\n\nconsole.log(groningen.getCafes())\n</code></pre> <p>Creatio ex nihilo</p> <p>Zoals vorige week uitgebreid is toegelicht, kent JavaScript (en dus bij extensie ook TypeScript) zogenaamde Creatio ex nihilo: je ziet dat we in de testcode hierboven geen klasse hebben die die interface implementeert, maar dat we eenvoudig objecten maken en die casten naar die interface. Dit kan natuurlijk misgaan wanneer we de interface aan zouden passen, maar het fijne van de type safety die TypeScript introduceert is dat onze IDE hierover zou vallen. Probeer het maar eens, door bijvoorbeeld <code>wijnen</code> toe te voegen aan de <code>Cafe</code>-interface...</p> <p></p>"},{"location":"week6/practicum.html#3-modules","title":"3. Modules","text":"<p>Waarschijnlijk heb je tot nu toe alle bovenstaande uitwerkingen in \u00e9\u00e9n bestand (<code>index.ts</code>) staan. E\u00e9n van de problemen die JavaScript heeft (of had, eigenlijk) is dat het lastig is om code in verschillende bestanden met elkaar samen te laten werken. Je kunt natuurlijk in je html-bestand verschillende <code>script</code>-tags achter elkaar zetten (zoals je weet zijn die blocking), maar dat is niet echt praktisch. Om die reden heeft TypeScript het concept van modules toegevoegd.</p> <p>Hernoem je bestand <code>index.ts</code> (of hoe je hem maar had genoemd) naar <code>Stad.ts</code>. Deze module moet zowel de klasse <code>Stad</code> als de bijhorende interfaces exporteren: voorzie ze daarvoor van het sleutelwoord <code>export</code>.</p> <p>Maak vervolgens een nieuw bestand <code>index.ts</code> aan, waarin je de klasse <code>Stad</code> uit het bestand dat je zojuist hebt gemaakt importeert. Verplaats vervolgens de code die je in de vorige twee opgaven hebt gemaakt naar dit nieuwe index-bestand. Transpileer de boel en bestudeer het gegenereerde JavaScript-bestand. Als het goed is, kun je nu opnieuw de <code>index.js</code> runnen en krijg je hetzelfde resultaat.</p> <pre><code>&gt; node index.js\n[\n{\nnaam: 'De Minnaar',\n    bieren: [ 'Jupiler', 'Karmeliet' ],\n    stoelen: 20\n},\n  { naam: 'De Bres', bieren: [ 'Dommelsch', 'Heineken' ], stoelen: 13 }\n]\n</code></pre> <p>Maak nu een nieuwe module waarin je de klasse <code>Provincie</code> definieert. Een provincie heeft een lijst van steden, een hoofdstad en een positie in het land. Maak voor dat laatste attribuut gebruik van het onderstaande <code>enum</code>. </p> <pre><code>enum Positie {\nNoord,\nZuid,\nOost,\nWest\n}\n</code></pre> <p>Zorg ervoor dat je bij het aanmaken van een object van het type <code>Provincie</code> de naam en de positie mee moet gegven. Voorzie deze klasse verder van een methode <code>getInwoners()</code>, waarin je het totaal van de inwoners van alle steden retourneert, en van een methode <code>addSteden</code>, waaraan je een willekeurig aantal steden kunt meegeven die vervolgens aan de lijst van steden wordt toegevoegd.</p> <p>Let op</p> <p>Bij deze laatste opgave is het de bedoeling dat je gebruik maakt van de spread-operator</p> <p>Je kunt de onderstaande code gebruiken om je uitwerking te testen, en ook om een beeld te krijgen van wat de bedoeling is.</p> <pre><code>const grunn:Provincie = new Provincie(\"Grunn\", Positie.Noord);\ngrunn.addSteden(groningen, winsum, delfzijl)\nconsole.log(`Onze fraaie provincie heeft ${grunn.getInwoners()} inwoners`)\n</code></pre>"},{"location":"week6/practicum.html#4-angular","title":"4. Angular","text":"<p>Na deze relatief eenvoudige oefeningen gaan we verder met het werken met Angular. Hiervoor maken we gebruik van getting started with Angular. Je kunt Angular op je lokale machine installeren, maar je kunt voor dit practicum ook gebruik maken van StackBlitz. Hier kun je eenvoudig in je browser je Angular-projecten uitproberen. Je kunt hier inloggen met je Github-account.</p> <p></p>"},{"location":"week7/index.html","title":"Week 7: MVC en Frameworks 2","text":"<p>Deze laatste week gaan we verder met MVC en frameworks. Waar we vorige week ge\u00ebindigd zijn met de problemen te identificeren en concrete kleine oplossingen daarvoor aan te bieden, gaan we deze week in op bestaande industrie-standaarden die het afgelopen decennium binnen deze problematiek ontwikkeld zijn.</p> <p></p>"},{"location":"week7/index.html#hoorcollege","title":"Hoorcollege","text":"<p>In het hoorcollege gaan we in op de drie grote spelers op dit gebeid: Vue, Angular en React. We bespreken de verschillen en overeenkomsten tussen deze drie frameworks, gaan in op specifieke use cases en geven van alledrie een korte introductie. De focus ligt hierbij op de manier waarop deze frameworks de ge\u00efdentificeerde problemen adresseren.</p> <p>Verder gaan we dieper in op TypeScript, de de facto industriestandaard waarmee we vorige week begonnen zijn. Hierbij laten we zien hoe dit verschilt en overeenkomt met JavaScript en welke gevolgen deze taal heeft voor het ontwikkelproces.</p>"},{"location":"week7/index.html#practicum","title":"Practicum","text":"<p>In het practicum gaan we een eenvoudige applicatie in Angular uitprogrammeren. Hierbij ligt de nadruk gebruikersinteractie, de modularisatie-aanpak van Angular en op het ophalen en weergeven van data. </p>"},{"location":"week7/index.html#literatuur","title":"Literatuur","text":"<p>A Comparative Analysis of Web Frameworks (Angular JS, React JS, Vue JS)</p>"},{"location":"week7/memory.html","title":"Memory week 7: Geaggregeerde data (Toetsmoment)","text":"<p>Voor de angular-applicatie gelden dezelfde regels als voor het memory-spel zelf, dus gebruikersvriendelijkheid, responsiveness en mobile first. Zorg er ook voor dat je de applicatie voorziet van een fraaie vormgeving (wat 'fraai' is mag je zelf bedenken).</p> <p>Bekijk de omschrijving van deze backend die vorige week gegeven is. Zorg er verder voor dat de volgende niet-functionele requirements in je applicatie verwerkt zitten:</p> <ul> <li>(Herhalende) functionaliteiten/onderdelen zijn op een logische manier gescheiden in verschillende <code>components</code>.</li> <li>Er worden <code>services</code> gebruikt voor het afhandelen van de API requests, JWT logica, en eventueel functionaliteiten en data die gedeeld worden door meerdere <code>components</code>.</li> <li>Indien daar een goede reden voor is mogen <code>NgModules</code> gebruikt worden, maar dit is niet noodzakelijk.</li> <li>Het Angular project gebruikt Typescript als taal, dus geen JavaScript.</li> <li>Het delen van data tussen componenten d.m.v. <code>@Input()</code>, <code>@Output()</code>, property binding en event binding komt voor in de applicatie.</li> <li>Directives <code>*ngIf</code> en <code>*ngFor</code> komen beiden voor in de applicatie.</li> <li>Tot slot is het MVC gedachtegoed aanwezig in de opbouw van de applicatie en worden de principes uit de Angular Style Guide toegepast.</li> </ul>"},{"location":"week7/memory.html#leesopdracht","title":"Leesopdracht","text":"<p>Lees het Medium artikel Will Web Components Replace Frontend Frameworks?. Beschrijf \u00e9\u00e9n van de redenen die in het artikel worden genoemd over waarom je over Web Components zou moeten leren. Ben jij het hier mee eens of niet? En waarom?</p>"},{"location":"week7/practicum.html","title":"Practicum week 7","text":""},{"location":"week7/practicum.html#inleiding","title":"Inleiding","text":"<p>Deze week gaan we verder met Angular. We zullen verschillende manier onderzoeken waarop componenten met elkaar kunnen communiceren en hoe je connectie maakt met de backend. Voordat we dat gaan doen, zullen we wat dieper ingaan op webcomponents, omdat dit een centrale techniek is in Angular en vergelijkbare frameworks. De code die je voor deze week nodig hebt vind je in deze zip. Hierin vind je drie directories: <code>Angular</code>, <code>Backend</code> en <code>Webcomponents</code>. </p>"},{"location":"week7/practicum.html#1-webcomponents","title":"1. Webcomponents","text":"<p>Tijdens het plenaire deel is ge\u00efllustreerd hoe je door middel van webcomponents en de shadow DOM zelf html-elementen kunt maken. In deze opdracht gebruiken we die kennis en techniek om een lijstje met persoonsgegevens aanzienlijk te vereenvoudigen.</p> <p>Bekijk de bestanden in de directory <code>Webcomponents</code>. Je ziet dat het best index-bestand behoorlijk veel duplicate code bevat, wat we de boel onoverzichtelijk en ononderhoudbaar maakt. Als je goed oplet, zie je dat het onderstaande deel telkens herhaald wordt:</p> <pre><code>  &lt;div class=\"card\"&gt;\n    &lt;div class=\"image\"&gt;\n      &lt;img src=\"imgs/pic1.jpeg\" alt=\"Thumbnail\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"content\"&gt;\n      &lt;h4&gt; Henk de Boer &lt;/h4&gt;\n      &lt;p&gt; Stadsweg 90 &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n</code></pre> <p></p> <p>Plaatjes</p> <p>Voor het geval je het afvraagt, die plaatjes komen van randomuser.me. Misschien ook nog een aardige API om toe te voegen aan het memory-spel...?</p> <p>Een dergelijk veel-herhalend stukje code vraag er gewoon om om gecompartamentaliseerd te worden, en webcomponents zijn daar de tool voor. Bekijk de code in <code>person-card.js</code>. Hierin zit al een stukje css en wat andere steigercode, waarin je als het goed is de html van het voorbeeld hierboven herkent.</p>"},{"location":"week7/practicum.html#1a-het-webcomponent-maken","title":"1a. het webcomponent maken","text":"<p>Maak een klasse <code>PersonCard</code> die overerft van <code>HTMLElement</code>. Voorzie de klasse van een property <code>static get observerAttributes</code> die een lijstje bevat van <code>image</code>, <code>name</code> en <code>address</code>. Dit worden de attributen die we later aan onze webcomponent mee kunnen geven.</p> <p>Zorg voor een constructor waarin je de template die bovenin het bestand gegeven is toevoegt aan <code>this._shadowRoot</code>. Voorzie vervolgens de klassse van drie properties die corresponderen met de <code>img</code>, de <code>h4</code> en de <code>p</code> in de template. Hier gaan we zometeen de waarden aan toekennen die we bij het maken van een <code>&lt;person-card&gt;</code> meegeven.</p> <p>Maak tenslotte de methode <code>attributeChanged(name, oldValue, newValue)</code>. In de <code>name</code>-parameter zit \u00e9\u00e9n van de geobserveerde attributen die je hierboven hebt aangegeven. De <code>oldValue</code> en <code>newValue</code> spreken voor zich. In deze methode moet de (nieuwe) waarde van een attribuut toegekend worden aan het corresponderende property die je hierboven (in de constructor) hebt gemaakt. Let op: voor de naam en het adres volstaat het om de <code>innerHTML</code> aan te passen, maar voor de avatar moet je natuurlijk de <code>src</code> wijzigen.</p>"},{"location":"week7/practicum.html#1b-het-webcomponent-gebruiken","title":"1b. het webcomponent gebruiken","text":"<p>Nu we het webcomponent hebben gemaakt en gedefineerd, kunnen we al die duplicate en relatief complexe html vervangen door een stuk eenvoudiger ogende code \u2013 wat er beter uitziet en een stuk onderhoudbaarder is. Gebruik de drie attributen die je in 1a hebt gemaakt om de waarden van de verschillende personen aan de <code>&lt;person-card&gt;</code> mee te geven. Als het goed is, is het resultaat hetzelfde (voor het oog althans: de kwaliteit van onze code-base is significant verbeterd).</p>"},{"location":"week7/practicum.html#2-angular","title":"2. Angular","text":"<p>Vorige week hebben we via wat eenvoudige oefeningen kennis gemaakt met TypeScript en met Angular. We hebben gezien hoe je met behulp van de <code>@Input()</code> en de <code>@Output()</code> annotaties data tussen verschillende componenten kunt versturen en ontvangen. Deze week gaan we dieper in op componenten en data. We kijken hierbij hoe je gebruik kunt maken van DOM-events of van Services om data tussen componenten te delen.</p> <p>Zorg ervoor dat je Angular (inclusief de CLI) op je lokale machine hebt draaien. Maak gebruik van <code>ng new week7</code> om een nieuw project op te starten. Dit commando maakt een nieuwe directory (<code>week7</code>) voor je aan. Vervang de bestanden in de <code>src</code>-directory door de directory <code>Angular/src/</code> die je vindt in de bestanden van deze week.</p>"},{"location":"week7/practicum.html#2a-native-events","title":"2a. Native events","text":"<p>Deze opgave gaan we werken met modules. Een module kun je zien als een container waarin stukken code worden geplaatst die samen verantwoordelijk zijn voor een bepaalde functionaliteit. Dit kunnen componenten zijn, maar ook services, constanten, of andere stukken programmacode. Alle onderdelen binnen dezelfde module hebben dezelfde scope (namelijk de module en op die manier fungeert een module dan ook als een sandbox.</p> <p>Het grootste deel van de infrastructuur is al voor je opgezet. Zoals je ziet zijn er in de directory <code>app/cards</code> twee componenten: <code>docent-search</code> en <code>student-search</code>. Deze twee bestanden vormen een soort kaartje waarvan de bezoeker van de site gebruik kan maken om gegevens van docenten en van (drum roll) studenten op te vragen. Bestudeer de code om je een beeld te vormen van hoe \u00e9\u00e9n en ander werkt.</p> <p></p> <p>Vorig week hebben we gezien dat je data van de ene naar de andere component kon verzenden door gebruik te maken van <code>@Output()</code> en <code>@Input()</code>. Op zich werkt dit prima, alleen is het probleem dat deze events niet bubbelen: als ze eenmaal door een component zijn afgevangen, houdt het doorsturen van dit Event ook op. Nu zou je natuurlijk dat proces weer kunnen herhalen, maar het is beter om gebruik te maken van native DOM-events, want die bubbelen w\u00e8l standaard.</p> <p>In deze opgave gaan we de zoekterm die de bezoeker intypt doorsturen naar de <code>results</code>-component. Als je kijkt naar <code>app.component.ts</code> zie je dat dit een sibling is van de beide zoekkaartjes. De uitdaging is dus om de zoekterm en het zoektype (student of docent) naar deze sibling te krijgen. Zie onderstaande afbeelding door de flow:</p> <p></p> <p>Voeg aan de zoekkaart (<code>app/shared/search-box.component.ts</code>) een methode <code>handleEvent()</code> toe die luistert naar een <code>blur</code>-event op het input-veld en een <code>click</code> event op het loepje. Deze methode moet een custom DomElement uitsturen met als naam <code>newdata</code>. Dit event stuurt de string uit het inputveld en het type waarop wordt gezocht door: deze combinatie is weergegeven in de interface <code>searchdata</code>. Maak hierbij gebruik van het property <code>ElementRef</code> dat je in de constructor ge\u00efnjecteerd ziet worden. Het veld <code>searchItem</code> dat je hier zit staan, wordt door de betreffende zoekkaartje ge\u00efnitialiseerd (met 'docent' of 'student') Merk op dat het input-element van het formulier voorzien is van de identifier <code>#searchbox</code>. </p>"},{"location":"week7/practicum.html#2b-afvangen","title":"2b. Afvangen","text":"<p>Omdat dit event helemaal doorloopt tot de bovenste component (<code>app.component</code>) kunnen we het daar ook opvangen. Zoals je kunt zien maken we daar al gebruik van de module <code>search-result</code> om de gevonden resultaten onderop de pagina weer te geven. Het is de bedoeling van deze opdracht om het event dat door de search-box wordt verstuurt wordt opgevangen door de <code>app-component</code> die het vervolgens doorstuurt aan de <code>search-result</code>-component.</p> <p>Wanneer het customevent wordt uitgestuurd, moet deze <code>app-component</code> daarop reageren. Zorg er dus voor (in de html) dat dit event wordt afgevangen en dat er een methode in die component daarop reageert (maak gebruik van de <code>(event)=\"handler()</code>-syntax). Deze methode moet het veld <code>searchdata</code> zetten naar datgene wat er door het event wordt doorgestuurd.</p>"},{"location":"week7/practicum.html#2c-doorsturen","title":"2c. Doorsturen","text":"<p>Nu we het veld <code>searchdata</code> van de <code>app.component</code> aanpassen op het moment dat er een customevent wordt doorgestuurd, kunnen we dit veld gebruiken om de corresponderende waarde in de <code>search-result</code>-component te zetten. Maak gebruik van de <code>[attribute]=\"value\"</code>-syntax om dit te bewerkstelligen.</p> <p>Implementeer vervolgens (en tenslotte) de methode <code>ngOnChanges</code> in de <code>search-result</code>-component. Deze component heeft al beschikkig over de student- en docentdata, dus het enige wat hier moet doen is checken of er gezocht wordt op een student of een docent en vervolgende de betreffende array filteren op respectievelijk het studentnummer of de vierlettercode. Bekijk de data in <code>data.ts</code> om te zien hier deze arrays eruit zien.</p> <p>Geeft het veld <code>docentdata</code> of <code>studentdata</code> de waarde van het gevonden resultaat (en de andere array op <code>undefined</code>) en zoek een student of docent. Als het goed is, krijg je nu de resultaten van je zoekopdracht te zien.</p> <p></p>"},{"location":"week7/practicum.html#3-services","title":"3. Services","text":"<p>Hoewel dit werken met events op zich wel werkt, is het (zoals je merkt) behoorlijk omslachtig en foutgevoelig. Om het werken met data makkelijker te maken, wordt in de regel gebruik gemaakt van services \u2013 een techniek die we in web 2 ook al zijn tegengekomen. Een service kun je injecteren in de componenten die er gebruik van moeten maken (ze worden dan ook voorzien van de annotatie <code>@Injectable</code>).</p> <p></p>"},{"location":"week7/practicum.html#3a-maken-van-een-service","title":"3a. maken van een service","text":"<p>Maak met de angular CLI een service <code>data</code>. Bestudeer de code die voor je gegenereert wordt:</p> <pre><code>% ng generate service data\nCREATE src/app/data.service.spec.ts (347 bytes)\nCREATE src/app/data.service.ts (133 bytes)\n% </code></pre> <p>spec.ts</p> <p>Dat tweede bestand <code>spec.ts</code> is het bestand dat je kunt gebruiken voor het testen van de gegenereerde service. Je kunt die eventueel wel weer weghalen, want testen doen we natuurlijk niet.</p> <p>Feitelijk doet deze service hetzelfde als wat je net in opdracht 1c hebt gedaan: het bevragen van de data op basis van een <code>searchdata</code>-object en dat opslaan in de corresponderende velden (<code>docentdata</code> of <code>studentdata</code>). Je kunt dus grote delen van deze code kopi\u00ebren in een methode <code>getData(what:searchdata)</code> die je in deze service moet maken.</p>"},{"location":"week7/practicum.html#3b-publish-subscribe","title":"3b. publish-subscribe","text":"<p>Zoals tijdens de theorieles is besproken, kun je werken met services zien als een vorm van publish-subscribe. Dat betekent dat je de service moet voorzien van een attribuut waar andere componenten zich op kunne abonneren. In het geval van Angular wordt hierbij gebruik gemaakt van RxJS BehaviorSubject. Je kunt deze properties gebruiken om wijzigingen in een andere property te versturen.  Bekijk onderstaande (pseudo-)code om hier een beeld bij te krijgen.</p> <pre><code>@Injectable()\nclass Publisher {\n// maak property om waarden in op te slaan\nname:String = ''\n\n// maak property waar anderen naar kunnen luisteren\npublic name$ = new BehaviorSubject&lt;String&gt;(this.name)\n\nnewName(value:String:void {\nthis.name = value\n\n// verstuur een bericht aan de subscribers\nthis.name$.next()\n}\n}\n\nclass Subscriber {\nconstructor (private publisher:Publisher) { }\n\nngOnInit () {\n// luister naar wijzigingen in publisher.name$\nthis.publisher.name$.subscribe ( data =&gt; console.log(data) )\n}\n}\n</code></pre> <p>Gebruik deze techniek om de data van studenten en docenten via de service beschikbaar te maken aan de <code>result</code>-component (dat wordt in dit verhaal dus de subscriber).</p>"},{"location":"week7/practicum.html#3c-weergeven-van-de-data","title":"3c. weergeven van de data","text":"<p>Injecteer vervolgens de service in de <code>search</code>-component en zorg ervoor dat de methode <code>handleEvent</code> nu geen gebruik meer maakt van een customevent, maar juist van de method <code>getData()</code> in de service. Als je het goed hebt gedaan, zie je nu opnieuw de resultaten van de zoekopdracht in het veld onderaan de pagina verschijnen.</p>"},{"location":"week7/practicum.html#3d-online-data","title":"3d. online data","text":"<p>Natuurlijk is het meestal niet zo dat de data die getoond moet worden op de frontend zelf beschikbaar is. Normaliter maak je gebruik van een backend, waar een database achter zit. In deze laatste opdracht gaan we deze stap zetten.</p> <p>In de bestanden van deze week zit ook een directory <code>Backend</code>, waarin een heel eenvoudig php-script dezelfde data beschikbaar stelt als die in het bestand <code>data.ts</code>. Start in deze directory een php-server op (<code>php -S localhost:8080</code>) en vervang de code in de dataservice door een <code>fetch</code> naar deze backend. Het endpoint <code>data.php?what=docent</code> geeft je de docentdata terug en het endpoint <code>data.php?what=student</code> de studentdata.</p> <p>Maak gebruik van je kennis van <code>Promises</code> om de boel weer aan de praat te krijgen.</p>"}]}