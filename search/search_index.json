{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Webtechnologie 3 \u00b6 In deze pagina's kun je alle informatie vinden voor het vak Webtechnologie 3. In deze module richten we ons met name (eigenlijk: uitsluitend) op de voorkant van webapplicaties. Weekindeling \u00b6 Elke week is er \u00e9\u00e9n hoorcollege en \u00e9\u00e9n (groot) practicum. Tijdens het hoorcollege worden de concepten die in de betreffende week centraal staan op een meer algemene, theoretische manier besproken. Er wordt hier stilgestaan bij het hoe en het waarom van de specifieke methoden en technieken die het web maken wat het is. Ook wordt bij dit college wat meer achtergrondinformatie verschaft, die je kan helpen zaken in de juiste context te plaatsen. Het practicum is centraal georganiseerd, duurt vier uur en wordt plenair uitgevoerd. Tijdens het practicum worden de concepten van die week aan de hand van kleine, concrete en specifieke opdrachten verder uitgediept. Nadat de opdracht plenair is besproken en toegelicht, gaan de studenten individueel aan het werk terwijl de docenten rondlopen om vragen te stellen en te beantwoorden. Na zo'n half uur wordt het geheel weer plenair teruggepakt en ge\u00ebvalueerd. Deze cyclus herhaalt zich drie of vier keer. De module kent de volgende weekindeling week onderwerpen oplevering 1 Inleiding, HTML en CSS 1 2 HTML en CSS 2 1. Memory in HTML en CSS 3 JavaScript Herkansing oplevering 1 4 JavaScript async programmeren 2. Memory met interactieve functionaliteit 5 Beveiliging en JWT Herkansing oplevering 2 6 MVC en Frameworks 1 3. Inloggen met JWT 7 MVC en Frameworks 2 Herkansing oplevering 3 8 Uitloop 4. Data-aggregatie 9 Herkansing oplevering 4 Toetsing, beoordeling en herkansingsmogelijkheden \u00b6 Tijdens de module werken studenten in duo's aan een website waarmee het bekende memory-spel ge\u00efmplementeerd moet worden. De realisatie van deze site volgt het klassieke ontwikkelmodel en tevens de onderdelen die in de tabel hierboven worden weergegeven. Er wordt eerst een statische webpagina gemaakt met puur de HTML en de CSS, vervolgens wordt client-based functionaliteit toegevoegd met behulp van JavaScript. Daarna wordt er gebruik gemaakt van een backend (of eigenlijk meerdere backends) om plaatjes van dit memory-spel op te helen, om de gegevens van spelers op te slaan en scores bij te houden. Dit moet uiteraard voorzien worden van login-functionaliteit en beveiliging, waar we JWT voor gebruiken. Uiteindelijk moet er ook een pagina gemaakt worden waarbij de opgeslagen data geaggregeerd bevraagd kan worden \u2013 denk aan het aantal spelers, de verdeling van de spelers over de tijd, mutaties in de high-scores en meer van dat soort werk. Elke twee weken is er een formeel oplevermoment van de website tot dusver. Hiervoor leveren de duo's hun werk in op de daartoe beschikbaar gestelde opleverplekken in Blackboard. De deadline voor het inleveren is telkens de donderdag in de even weken van het thema (zie Blackboard voor de concrete data). Docenten beoordelen het ingeleverde werk op de vrijdag. In de toetsmatrijs staat beschreven waar de applicatie op dat moment minimaal aan moet voldoen. Mocht het werk van een bepaalde week nog onvoldoende zijn, dan kunnen studenten de daaropvolgende week gebruiken om reparatiewerkzaamehden uit te voeren. Omdat de memory-website sequentieel wordt opgebouwd en elke nieuwe iteratie afhankelijk is van de afronding van de vorige is het van belang dat hier geen achterstand bij ontstaat. Studenten wordt dan ook geadviseerd een goede planning op te zetten en zich daaraan te houden.","title":"Introductie"},{"location":"index.html#webtechnologie-3","text":"In deze pagina's kun je alle informatie vinden voor het vak Webtechnologie 3. In deze module richten we ons met name (eigenlijk: uitsluitend) op de voorkant van webapplicaties.","title":"Webtechnologie 3"},{"location":"index.html#weekindeling","text":"Elke week is er \u00e9\u00e9n hoorcollege en \u00e9\u00e9n (groot) practicum. Tijdens het hoorcollege worden de concepten die in de betreffende week centraal staan op een meer algemene, theoretische manier besproken. Er wordt hier stilgestaan bij het hoe en het waarom van de specifieke methoden en technieken die het web maken wat het is. Ook wordt bij dit college wat meer achtergrondinformatie verschaft, die je kan helpen zaken in de juiste context te plaatsen. Het practicum is centraal georganiseerd, duurt vier uur en wordt plenair uitgevoerd. Tijdens het practicum worden de concepten van die week aan de hand van kleine, concrete en specifieke opdrachten verder uitgediept. Nadat de opdracht plenair is besproken en toegelicht, gaan de studenten individueel aan het werk terwijl de docenten rondlopen om vragen te stellen en te beantwoorden. Na zo'n half uur wordt het geheel weer plenair teruggepakt en ge\u00ebvalueerd. Deze cyclus herhaalt zich drie of vier keer. De module kent de volgende weekindeling week onderwerpen oplevering 1 Inleiding, HTML en CSS 1 2 HTML en CSS 2 1. Memory in HTML en CSS 3 JavaScript Herkansing oplevering 1 4 JavaScript async programmeren 2. Memory met interactieve functionaliteit 5 Beveiliging en JWT Herkansing oplevering 2 6 MVC en Frameworks 1 3. Inloggen met JWT 7 MVC en Frameworks 2 Herkansing oplevering 3 8 Uitloop 4. Data-aggregatie 9 Herkansing oplevering 4","title":"Weekindeling"},{"location":"index.html#toetsing-beoordeling-en-herkansingsmogelijkheden","text":"Tijdens de module werken studenten in duo's aan een website waarmee het bekende memory-spel ge\u00efmplementeerd moet worden. De realisatie van deze site volgt het klassieke ontwikkelmodel en tevens de onderdelen die in de tabel hierboven worden weergegeven. Er wordt eerst een statische webpagina gemaakt met puur de HTML en de CSS, vervolgens wordt client-based functionaliteit toegevoegd met behulp van JavaScript. Daarna wordt er gebruik gemaakt van een backend (of eigenlijk meerdere backends) om plaatjes van dit memory-spel op te helen, om de gegevens van spelers op te slaan en scores bij te houden. Dit moet uiteraard voorzien worden van login-functionaliteit en beveiliging, waar we JWT voor gebruiken. Uiteindelijk moet er ook een pagina gemaakt worden waarbij de opgeslagen data geaggregeerd bevraagd kan worden \u2013 denk aan het aantal spelers, de verdeling van de spelers over de tijd, mutaties in de high-scores en meer van dat soort werk. Elke twee weken is er een formeel oplevermoment van de website tot dusver. Hiervoor leveren de duo's hun werk in op de daartoe beschikbaar gestelde opleverplekken in Blackboard. De deadline voor het inleveren is telkens de donderdag in de even weken van het thema (zie Blackboard voor de concrete data). Docenten beoordelen het ingeleverde werk op de vrijdag. In de toetsmatrijs staat beschreven waar de applicatie op dat moment minimaal aan moet voldoen. Mocht het werk van een bepaalde week nog onvoldoende zijn, dan kunnen studenten de daaropvolgende week gebruiken om reparatiewerkzaamehden uit te voeren. Omdat de memory-website sequentieel wordt opgebouwd en elke nieuwe iteratie afhankelijk is van de afronding van de vorige is het van belang dat hier geen achterstand bij ontstaat. Studenten wordt dan ook geadviseerd een goede planning op te zetten en zich daaraan te houden.","title":"Toetsing, beoordeling en herkansingsmogelijkheden"},{"location":"colleges.html","text":"Hoorcolleges \u00b6 Elke week wordt voorafgegaan door een hoorcollege. Voor zover daar presentaties bij worden gebruikt, worden die op deze pagina beschikbaar gesteld.","title":"Hoorcolleges"},{"location":"colleges.html#hoorcolleges","text":"Elke week wordt voorafgegaan door een hoorcollege. Voor zover daar presentaties bij worden gebruikt, worden die op deze pagina beschikbaar gesteld.","title":"Hoorcolleges"},{"location":"memory.html","text":"Toetsing: Memory game \u00b6 De toetsing van dit kwartaal wordt gedaan aan de hand van het bekende spel memory. Gedurende acht weken werk je samen met een duo-partner aan dit spel, waarbij je op vier verschillende momenten je vorderingen tot dan toe moet inleveren. De eisen die op deze toetsmomenten aan het spel gesteld worden corresponderen met de onderwerken die in die week aan de orde zijn gekomen, zodat je het spel sequentieel kunt opbouwen. Elke week wordt een klein overzicht gegeven van de eisen waar je memory-spel in die week aan moet voldoen. De beoordeling van het werk is op de vrijdag van elke even week in het blok. Inleveren doe je door een zip-bestand van je code op Blackboard te uploaden \u2013 zie de deadlines aldaar. Let op: te laat inleveren is een onvoldoende voor dat onderdeel. Elk onderdeel van het memory-spel wordt met een cijfer beoordeeld. Het eindcijfer voor dit onderdeel is het rekenkundig gemiddelde van deze vier deelcijfers. In het geval van een onvoldoende worden er individuele reparatiewerkzaamheden afgesproken, die studenten in de daaropvolgende week moeten uitvoeren. Zie ook het onderdeel toetsing, beoordeling en herkansingsmogelijkheden in de algemene introductie.","title":"Memory game"},{"location":"memory.html#toetsing-memory-game","text":"De toetsing van dit kwartaal wordt gedaan aan de hand van het bekende spel memory. Gedurende acht weken werk je samen met een duo-partner aan dit spel, waarbij je op vier verschillende momenten je vorderingen tot dan toe moet inleveren. De eisen die op deze toetsmomenten aan het spel gesteld worden corresponderen met de onderwerken die in die week aan de orde zijn gekomen, zodat je het spel sequentieel kunt opbouwen. Elke week wordt een klein overzicht gegeven van de eisen waar je memory-spel in die week aan moet voldoen. De beoordeling van het werk is op de vrijdag van elke even week in het blok. Inleveren doe je door een zip-bestand van je code op Blackboard te uploaden \u2013 zie de deadlines aldaar. Let op: te laat inleveren is een onvoldoende voor dat onderdeel. Elk onderdeel van het memory-spel wordt met een cijfer beoordeeld. Het eindcijfer voor dit onderdeel is het rekenkundig gemiddelde van deze vier deelcijfers. In het geval van een onvoldoende worden er individuele reparatiewerkzaamheden afgesproken, die studenten in de daaropvolgende week moeten uitvoeren. Zie ook het onderdeel toetsing, beoordeling en herkansingsmogelijkheden in de algemene introductie.","title":"Toetsing: Memory game"},{"location":"practicum.html","text":"Werkwijze tijdens de practica \u00b6 Elke week is er een plenair practicum van vier uur. Tijdens deze practica worden de centrale concepten van de betreffende week (en die bij het hoorcollege zijn toegelicht) aan de hand van korte en specifieke opdrachten uitgewerkt. Er wordt een korte algemene practische introductie van het onderwerp gegeven, waarna de opgave wordt toegelicht. Vervolgens gaan de studenten individueel aan het werk aan deze opgave, terwijl de docenten (en hopelijk de student-assistent) rondlopen om vragen te stellen en te beantwoorden. Na een bepaalde periode wordt de opdracht weer plenair toegelicht en uitgewerkt, waarna deze procedure zich voor een vervolgopdracht herhaalt. De practica zijn bedoeld om de technieken die in die week centraal staan concreet toe te lichten. Deze onderwerpen corresponderen met de eisen die op dat moment aan het memory-spel gesteld worden. Door deze opzet kunnen deze technieken direct ingezet worden. Doordat het een plenair practicum is ontstaat een sfeer van samen doen en samen leren.","title":"Werkwijze tijdens de practica"},{"location":"practicum.html#werkwijze-tijdens-de-practica","text":"Elke week is er een plenair practicum van vier uur. Tijdens deze practica worden de centrale concepten van de betreffende week (en die bij het hoorcollege zijn toegelicht) aan de hand van korte en specifieke opdrachten uitgewerkt. Er wordt een korte algemene practische introductie van het onderwerp gegeven, waarna de opgave wordt toegelicht. Vervolgens gaan de studenten individueel aan het werk aan deze opgave, terwijl de docenten (en hopelijk de student-assistent) rondlopen om vragen te stellen en te beantwoorden. Na een bepaalde periode wordt de opdracht weer plenair toegelicht en uitgewerkt, waarna deze procedure zich voor een vervolgopdracht herhaalt. De practica zijn bedoeld om de technieken die in die week centraal staan concreet toe te lichten. Deze onderwerpen corresponderen met de eisen die op dat moment aan het memory-spel gesteld worden. Door deze opzet kunnen deze technieken direct ingezet worden. Doordat het een plenair practicum is ontstaat een sfeer van samen doen en samen leren.","title":"Werkwijze tijdens de practica"},{"location":"week1/index.html","text":"Week 1: HTML en CSS 1 \u00b6 In deze eerste week kijken we naar de algemene architectuur van het web, bespreken we de verhouding tussen de voor- en de achterkant van webapplicaties en analyseren we de werking van de meest gebruikte soort applicatie: de webbrowser. Hoorcollege \u00b6 In het hoorcollege gaan we in op de werking van een webbrowser. Wat gebeurt er allemaal vanaf het moment dat je een url in de navitiebalk intypt en op enter druk tot het moment dat er een fraaie webpagina op het scherm tevoorschijn komt? Er wordt ingegaan op de gevolgen die deze ontwikkeling heeft voor de web-ontwikkelaar, hoe om te gaan met verschillende soorten browsers en een diversiteit aan hardware. Na deze meer theoretische inleiding bekijken we de technieken die de web-ontwikkelaar ten dienste staan om op een goede en effectieve manier te werken. We gaan uitgebreid in op de development-tools en laten aan de hand van uitgebeide voorbeelden zien hoe deze kunnen worden ingezet. Vervolgens gaan we in op HTML en CSS. We bouwen verder op webtechnologie 1 (dat in de propdeuse gegeven wordt) en op de eerste week van webtechnologie 2 (periode 2.3). We gaan hier in op de exacte werking van deze technieken, bespreken de meer semantische elementen en kijken hoe je kunt ontwerpen voor toegankelijkheid. Practicum \u00b6 Aan de hand van specifieke en concrete opdrachten zullen tijdens het practicum verschillende voorbeelden uitgewerkt worden, waarbij ge\u00ebxperimenteerd wordt met complexe matching rules , reflection en global attributes . We zullen aan de hand van een eenvoudige zelfgemaakte browser de flow layout demonstreren. We kijken ook naar meer creatieve websites, zoals Live web coding performance, een soort VJ'en in de JavaScript console: https://player.vimeo.com/video/318721981?dnt=true Scultpuren van websites: https://jip.debeer.it/facebook-in-gold/ en https://jip.debeer.it/google-in-gold/ http://motherfuckingwebsite.com/ en http://bettermotherfuckingwebsite.com/ en https://thebestmotherfucking.website/ https://theuselessweb.com/ https://pointerpointer.com/","title":"Inleiding"},{"location":"week1/index.html#week-1-html-en-css-1","text":"In deze eerste week kijken we naar de algemene architectuur van het web, bespreken we de verhouding tussen de voor- en de achterkant van webapplicaties en analyseren we de werking van de meest gebruikte soort applicatie: de webbrowser.","title":"Week 1: HTML en CSS 1"},{"location":"week1/index.html#hoorcollege","text":"In het hoorcollege gaan we in op de werking van een webbrowser. Wat gebeurt er allemaal vanaf het moment dat je een url in de navitiebalk intypt en op enter druk tot het moment dat er een fraaie webpagina op het scherm tevoorschijn komt? Er wordt ingegaan op de gevolgen die deze ontwikkeling heeft voor de web-ontwikkelaar, hoe om te gaan met verschillende soorten browsers en een diversiteit aan hardware. Na deze meer theoretische inleiding bekijken we de technieken die de web-ontwikkelaar ten dienste staan om op een goede en effectieve manier te werken. We gaan uitgebreid in op de development-tools en laten aan de hand van uitgebeide voorbeelden zien hoe deze kunnen worden ingezet. Vervolgens gaan we in op HTML en CSS. We bouwen verder op webtechnologie 1 (dat in de propdeuse gegeven wordt) en op de eerste week van webtechnologie 2 (periode 2.3). We gaan hier in op de exacte werking van deze technieken, bespreken de meer semantische elementen en kijken hoe je kunt ontwerpen voor toegankelijkheid.","title":"Hoorcollege"},{"location":"week1/index.html#practicum","text":"Aan de hand van specifieke en concrete opdrachten zullen tijdens het practicum verschillende voorbeelden uitgewerkt worden, waarbij ge\u00ebxperimenteerd wordt met complexe matching rules , reflection en global attributes . We zullen aan de hand van een eenvoudige zelfgemaakte browser de flow layout demonstreren. We kijken ook naar meer creatieve websites, zoals Live web coding performance, een soort VJ'en in de JavaScript console: https://player.vimeo.com/video/318721981?dnt=true Scultpuren van websites: https://jip.debeer.it/facebook-in-gold/ en https://jip.debeer.it/google-in-gold/ http://motherfuckingwebsite.com/ en http://bettermotherfuckingwebsite.com/ en https://thebestmotherfucking.website/ https://theuselessweb.com/ https://pointerpointer.com/","title":"Practicum"},{"location":"week1/memory.html","text":"Memory week 1 \u00b6 Gedurende dit kwartaal maken we het bekende spel 'Memory' na. Eerst alleen nog in HTML en CSS., maar elke week breiden we het uit met meer functionaliteit. Deze week zetten we de layout op en voegen we wat minimale styling toe aan het memory spel. Maak een leeg HTML bestand aan, en cre\u00eber een HTML \"skelet\" (een soort \"hello world\" bestand). Zorg in ieder geval dat er een document type gedeclareerd wordt, en dat de html- en bodytags er op een juiste manier in staan. HTML Basic (w3schools.com) Bestudeer onderstaande afbeelding van het memory spel en zorg er met HTML elementen voor dat het dezelfde inhoud heeft als wat je op de afbeelding ziet: titels, teksten, knopjes, en een speelveld van 6 bij 6. Je hoeft voor de eerste oplevering nog geen echte functionaliteit in te bouwen \u2013 dat komt in de volgende paar weken uitgebreid aan bod. De speelvlakken hebben vooralsnog twee statussen: 'open' en 'gesloten'. Nu volstaat het om deze twee \"hard coded\" aan verschillende div s mee te geven \u2013 in de loop van de komende periode zullen we hier werkelijk functionaliteit aan toevoegen.","title":"Memory"},{"location":"week1/memory.html#memory-week-1","text":"Gedurende dit kwartaal maken we het bekende spel 'Memory' na. Eerst alleen nog in HTML en CSS., maar elke week breiden we het uit met meer functionaliteit. Deze week zetten we de layout op en voegen we wat minimale styling toe aan het memory spel. Maak een leeg HTML bestand aan, en cre\u00eber een HTML \"skelet\" (een soort \"hello world\" bestand). Zorg in ieder geval dat er een document type gedeclareerd wordt, en dat de html- en bodytags er op een juiste manier in staan. HTML Basic (w3schools.com) Bestudeer onderstaande afbeelding van het memory spel en zorg er met HTML elementen voor dat het dezelfde inhoud heeft als wat je op de afbeelding ziet: titels, teksten, knopjes, en een speelveld van 6 bij 6. Je hoeft voor de eerste oplevering nog geen echte functionaliteit in te bouwen \u2013 dat komt in de volgende paar weken uitgebreid aan bod. De speelvlakken hebben vooralsnog twee statussen: 'open' en 'gesloten'. Nu volstaat het om deze twee \"hard coded\" aan verschillende div s mee te geven \u2013 in de loop van de komende periode zullen we hier werkelijk functionaliteit aan toevoegen.","title":"Memory week 1"},{"location":"week1/practicum.html","text":"Practicum week 1 - Browsers, HTML & CSS (1) \u00b6 In dit practicum maak je kennis met algemene frontend technieken, waaronder componenten van de webbrowser en webpagina's, html elementen, developer tools, netwerk, console, JavaScript, styling, etc. 1e helft : Browser & webpagina's - Inspect element - Styles - Network - Console - Performance 2e helft : HTML & CSS - CV bouwen Browser & webpagina's \u00b6 [ \u00bc ] Inspect element (10 minuten) \u00b6 Open de browser en navigeer naar hanze.nl . Klik met de rechtermuistoets ergens willekeurig op de pagina en selecteer \u201cinspect\u201d of \u201cinspect element\u201d. Wat voor soort HTML elementen/tags worden gebruikt voor het opsommen van de lijst opleidingen , open dagen & voorlichtingen , en bedrijven ? Vind voorbeelden van: <a> <p> <h1> <input> <li> <span> [ 2/4 ] Inspect element (10 minuten) \u00b6 Verander de nieuwskoppen van je favoriete nieuwssite naar wat luchtiger/positiever nieuws, publiceer de schermafbeelding ervan op deze Padlet . [ \u00be ] Inspect element (10 minuten) \u00b6 Ga naar het Twitter account van de Amerikaanse president Joe Biden. Als je een twitter account hebt, zorg dan dat je uitgelogd bent. Scroll naar beneden en je zult gevraagd worden om in te loggen of te registeren. Doe dit niet. Zorg in plaats daarvan dat je de \"muur\" verwijdert, het het scrollen weer activeert. Hint : zoek naar het element waarbij in CSS de pointer-events zijn uitgeschakeld (tabje Styles). Als je die gevonden hebt, schakel de pointer events weer in. Pas vervolgens een willekeurige tweet aan door een tekst naar keuze, publiceer de schermafbeelding ervan op deze Padlet . [ 4/4 ] Inspect element - nabespreking (10 minuten) \u00b6 Wat vind je ervan dat je zomaar nieuwssites en Twitter posts kunt aanpassen? Styles (15 minuten) \u00b6 Open de browser en navigeer naar hanze.nl . Klik met de rechtermuistoets ergens willekeurig op de pagina en selecteer \u201cinspect\u201d of \u201cinspect element\u201d. Open in het tabje Elements het tabje Styles. Selecteer een element dat de typische Hanze-oranje kleur bevat. Wat is de kleurcode? Maak het Hanze logo twee keer zo groot. Verwijder de achtergrond foto. De Hanze website wordt natuurlijk veel mooier in een developer-achtige look. Geef alle tekst het lettertype monospace . Vervang de teksten bovenaan de pagina (welkomsttekst, menu-items, etc.) door teksten naar keuze. Vervang de achtergrondkleuren door een kleur naar keuze. Vervang het Hanze logo door een logo van een ander bedrijf naar keuze (link). Publiceer de schermafbeelding ervan op deze Padlet . Network (10 minuten) \u00b6 Open het tabje Network/Netwerk en ververs hanze.nl . Wat is de url van de achtergrondfoto bovenaan de pagina? We gaan testen hoe snel de website laadt op een snel 3G netwerk. Zorg dat de opname knop aan staat Vink \"disable cache\" aan. Zet network throttling op \"Fast 3G\". Wat is de totale laadtijd van de pagina? Welk bestand is het grootst en neemt het meeste laadtijd in beslag? Console (15 minuten) \u00b6 Navigeer naar google.com . Verwijder alle elementen behalve de zoekbalk en het microfoon icoontje. Selecteer het google logo ( img element) en typ naast class=\"..\" het volgende: id=\"google-logo\" Open de tab 'console' en voer de volgende JavaScript code uit: document . getElementById ( \"google-logo\" ). animate ([ // keyframes { transform : 'rotate(0deg)' }, { transform : 'rotate(360deg)' } ], { // timing options duration : 1000 , iterations : Infinity }); Wat gebeurt er met het logo? Voer bovenstaande code nogmaals uit, maar vervang dit keer de woorden rotate door skewY . Wat gebeurt er nu? Kun je dit ook op andere elementen toepassen? (let op: geef elk element een uniek id, en gebruik dit id ook in de code) Voeg dit principe toe aan een andere website naar keuze, en doe dit met meerdere elementen. Wie maakt de meest gestoorde webpagina? Publiceer de schermafbeelding ervan op deze Padlet Performance (10 minuten) \u00b6 Bekijk en inspecteer de website: http://motherfuckingwebsite.com/ . De makers ervan beweren dat dit d\u00e9 perfecte website is, onder andere omdat het lightweight is en snel laadt. We gaan deze bewering over de high performance testen met Lighthouse. Vergelijk de score voor performance met deze sites: hanze.nl , nos.nl , en w3schools.com . Wat zijn de scores? Waardoor denk je dat de een beter scoort dan de ander? Bekijk de details van de performance scores voor de verschillende sites. Wat valt je op? Nabespreking (10 minuten) HTML & CSS \u00b6 [ \u00bd ] CV in HTML (30 minuten) \u00b6 Maak in een HTML bestand je (fictieve droom) CV en gebruik tenminste de volgende HTML elementen. Je hoeft nog geen CSS toe te voegen. headings ( <h1> , <h2> , etc.) divisions ( <div> ) paragraphs ( <p> ) tekst formatting ( <strong> , <i> , <small> , etc.) images ( <img> ) links ( <a> ) lists ( <ul> of <ol> ) table ( <table> ) [ 2/2 ] CV met CSS (30 minuten) \u00b6 Voeg styling toe aan je CV, en denk aan: kleur lettertype grootte positionering etc.","title":"Practicum"},{"location":"week1/practicum.html#practicum-week-1-browsers-html-css-1","text":"In dit practicum maak je kennis met algemene frontend technieken, waaronder componenten van de webbrowser en webpagina's, html elementen, developer tools, netwerk, console, JavaScript, styling, etc. 1e helft : Browser & webpagina's - Inspect element - Styles - Network - Console - Performance 2e helft : HTML & CSS - CV bouwen","title":"Practicum week 1 - Browsers, HTML &amp; CSS (1)"},{"location":"week1/practicum.html#browser-webpaginas","text":"","title":"Browser &amp; webpagina's"},{"location":"week1/practicum.html#html-css","text":"","title":"HTML &amp; CSS"},{"location":"week2/index.html","text":"Week 2: HTML en CSS 2 \u00b6 Deze week ronden we het materiaal over html en css voor wat betreft dit thema (en de opleiding) af. Deze technieken zijn dusdanig uitgebreid dat ze op zichzelf een heel thema zouden legitimeren (dat ook bestaat), maar voor software engineers is het voldoende een meer dan hands-on kennis van te hebben. Specifiek gaan we deze week in op media queries , het concept van de flexbox , de shadow DOM en user components . Met behulp van deze technieken maken we onze websites responsive en zorgen we voor cross browser support . Hoorcollege \u00b6 Het hoorcollege bespreekt deze onderwerpen op een meer theoretische manier. Er wordt ingegaan op de werking van de flexbox , de shadow DOM en user components , de verschillen met de meer traditionele html/css-elementen en de problemen waar deze technieken een oplossing voor proberen te vormen. We kijken naar specifieke use cases die hiermee gepaard kunnen gaan. Behalve een meer theoretische aanpak, zal ook de praktijk aan bod komen. Aan de hand van live coding zullen voorbeelden en uitwerkingen de revue passeren, waarbij de mogelijkheden (en problemen natuurlijk) duidelijk gemaakt worden. Deze praktische aanpak zal zijn weerslag hebben in het hierbij horende practicum. Practicum \u00b6 Ook tijdens het practicum staan media queries , css-animations en positioning (met name de flexbox . Elk van deze onderwerpen zal aan de hand van een kleine concrete en specifieke opgave worden uitgediept. Literatuur \u00b6 MDN over de flexbox MDN over de shadow DOM MDN over accessibility","title":"Inleiding"},{"location":"week2/index.html#week-2-html-en-css-2","text":"Deze week ronden we het materiaal over html en css voor wat betreft dit thema (en de opleiding) af. Deze technieken zijn dusdanig uitgebreid dat ze op zichzelf een heel thema zouden legitimeren (dat ook bestaat), maar voor software engineers is het voldoende een meer dan hands-on kennis van te hebben. Specifiek gaan we deze week in op media queries , het concept van de flexbox , de shadow DOM en user components . Met behulp van deze technieken maken we onze websites responsive en zorgen we voor cross browser support .","title":"Week 2: HTML en CSS 2"},{"location":"week2/index.html#hoorcollege","text":"Het hoorcollege bespreekt deze onderwerpen op een meer theoretische manier. Er wordt ingegaan op de werking van de flexbox , de shadow DOM en user components , de verschillen met de meer traditionele html/css-elementen en de problemen waar deze technieken een oplossing voor proberen te vormen. We kijken naar specifieke use cases die hiermee gepaard kunnen gaan. Behalve een meer theoretische aanpak, zal ook de praktijk aan bod komen. Aan de hand van live coding zullen voorbeelden en uitwerkingen de revue passeren, waarbij de mogelijkheden (en problemen natuurlijk) duidelijk gemaakt worden. Deze praktische aanpak zal zijn weerslag hebben in het hierbij horende practicum.","title":"Hoorcollege"},{"location":"week2/index.html#practicum","text":"Ook tijdens het practicum staan media queries , css-animations en positioning (met name de flexbox . Elk van deze onderwerpen zal aan de hand van een kleine concrete en specifieke opgave worden uitgediept.","title":"Practicum"},{"location":"week2/index.html#literatuur","text":"MDN over de flexbox MDN over de shadow DOM MDN over accessibility","title":"Literatuur"},{"location":"week2/memory.html","text":"Week 2 - Memory 1 - eerste toetsmoment \u00b6 Voor het eerste toetsmoment staat hieronder beschreven wat er opgeleverd dient te worden. Zestig procent van de opdracht bestaat uit het ontwikkelen van het memory spel. Veertig procent bestaat uit leesopdrachten \u2013 beantwoord die in een bestand leesopdrachten.txt en voeg die toe aan je zip. Lever de uitwerking van de memory en je antwoorden op de leesopdracht in via het betreffende inleverpunt op Blackboard. Memory 1 (70%) \u00b6 Let op: alleen visueel! Let op: het is specifiek niet de bedoeling dat alle functionaliteit die hieronder gesuggereerd wordt ook al werkt. In dit eerste moment is het juist het doel de voorkant volledig afgerond te hebben voordat we de boel laten werken. Dat gezegd hebbende moet de bezoeker natuurlijk wel op de voor de hand liggende interface-elementen, zoals dropdowns en speelkaarten, kunnen klikken. Zorg ervoor dat met behulp van html en css de onderstaande requirements zijn gerealiseerd: bovenaan de pagina staat een titel tussen de titel en het speelvlak staat de huidige status van het spel: verlopen tijd aantal gevonden paren resterende tijd hieronder staat een gekleurde balk die de grootte heeft van twee speelkaarten er is een speelveld van zes bij zes speelkaarten de kaarten hebben \u00e9\u00e9n van de volgende drie statussen, die door middel van css visueel van elkaar te onderscheiden zijn: gesloten open gevonden rechts van het speelvlak staat de volgende informatie: een top vijf totaal gemiddelde speeltijd hieronder staan twee drop-downs waarmee de volgende instellingen kunnen worden gekozen: het karakter op de (gesloten) speelkaarten de afmetingen van het speelbord daaronder staan drie kleur-selecties: de kleur van de gesloten kaarten de kleur van de open kaarten de kleur van de gevonden kaarten tenslotte staat er een knop waarmee (later) het spel gestart kan worden voor de verschillende onderdelen zijn passende HTML elementen gebruikt er is rekening gehouden met toegankelijkheid, zodat bijvoorbeeld gebruikers met een screen reader de webapplicatie kunnen gebruiken het spel is responsive, en wordt gebruiksvriendelijk getoond op zowel desktop apparaten als mobiele telefoons, waarbij gebruik is gemaakt van mobile-first design Leesopdracht (30%) \u00b6 Lees het artikel over webtoegankelijkheid (of hier als bestand ) en beantwoord de volgende vragen in een korte alinea per vraag. a. Probeer je voor te stellen dat je niet (meer) kunt zien, maar wel je favoriete site wilt bezoeken. Welke van de in het artikel genoemde frustratie over (on)toegankelijkheid lijkt jou het meest belemmerend? En waarom? b. Kom je als ziend persoon ook wel eens dingen tegen die jou belemmeren in het correct gebruiken van een website? Beschrijf kort wat je tegenkomt en hoe jij dit beter zou willen doen. Lees het artikel over responsive web design (of hier als bestand ) en beantwoord de volgende vraag in een korte alinea. a. Er zijn twee benaderingen als het gaat om responsive web design: mobile-first of desktop-first. Niet iedereen is het eens over welke de voorkeur zou moeten hebben, alhoewel de \u00e9\u00e9n wellicht populairder is dan de ander. Dit artikel betoogt een duidelijke voorkeur. Ben jij het met de schrijver van het artikel eens? Leg uit waarom je het hier wel of niet mee eens bent met behulp van een argument dat in het artikel wordt genoemd.","title":"Memory (toetsmoment)"},{"location":"week2/memory.html#week-2-memory-1-eerste-toetsmoment","text":"Voor het eerste toetsmoment staat hieronder beschreven wat er opgeleverd dient te worden. Zestig procent van de opdracht bestaat uit het ontwikkelen van het memory spel. Veertig procent bestaat uit leesopdrachten \u2013 beantwoord die in een bestand leesopdrachten.txt en voeg die toe aan je zip. Lever de uitwerking van de memory en je antwoorden op de leesopdracht in via het betreffende inleverpunt op Blackboard.","title":"Week 2 - Memory 1 - eerste toetsmoment"},{"location":"week2/memory.html#memory-1-70","text":"Let op: alleen visueel! Let op: het is specifiek niet de bedoeling dat alle functionaliteit die hieronder gesuggereerd wordt ook al werkt. In dit eerste moment is het juist het doel de voorkant volledig afgerond te hebben voordat we de boel laten werken. Dat gezegd hebbende moet de bezoeker natuurlijk wel op de voor de hand liggende interface-elementen, zoals dropdowns en speelkaarten, kunnen klikken. Zorg ervoor dat met behulp van html en css de onderstaande requirements zijn gerealiseerd: bovenaan de pagina staat een titel tussen de titel en het speelvlak staat de huidige status van het spel: verlopen tijd aantal gevonden paren resterende tijd hieronder staat een gekleurde balk die de grootte heeft van twee speelkaarten er is een speelveld van zes bij zes speelkaarten de kaarten hebben \u00e9\u00e9n van de volgende drie statussen, die door middel van css visueel van elkaar te onderscheiden zijn: gesloten open gevonden rechts van het speelvlak staat de volgende informatie: een top vijf totaal gemiddelde speeltijd hieronder staan twee drop-downs waarmee de volgende instellingen kunnen worden gekozen: het karakter op de (gesloten) speelkaarten de afmetingen van het speelbord daaronder staan drie kleur-selecties: de kleur van de gesloten kaarten de kleur van de open kaarten de kleur van de gevonden kaarten tenslotte staat er een knop waarmee (later) het spel gestart kan worden voor de verschillende onderdelen zijn passende HTML elementen gebruikt er is rekening gehouden met toegankelijkheid, zodat bijvoorbeeld gebruikers met een screen reader de webapplicatie kunnen gebruiken het spel is responsive, en wordt gebruiksvriendelijk getoond op zowel desktop apparaten als mobiele telefoons, waarbij gebruik is gemaakt van mobile-first design","title":"Memory 1 (70%)"},{"location":"week2/memory.html#leesopdracht-30","text":"Lees het artikel over webtoegankelijkheid (of hier als bestand ) en beantwoord de volgende vragen in een korte alinea per vraag. a. Probeer je voor te stellen dat je niet (meer) kunt zien, maar wel je favoriete site wilt bezoeken. Welke van de in het artikel genoemde frustratie over (on)toegankelijkheid lijkt jou het meest belemmerend? En waarom? b. Kom je als ziend persoon ook wel eens dingen tegen die jou belemmeren in het correct gebruiken van een website? Beschrijf kort wat je tegenkomt en hoe jij dit beter zou willen doen. Lees het artikel over responsive web design (of hier als bestand ) en beantwoord de volgende vraag in een korte alinea. a. Er zijn twee benaderingen als het gaat om responsive web design: mobile-first of desktop-first. Niet iedereen is het eens over welke de voorkeur zou moeten hebben, alhoewel de \u00e9\u00e9n wellicht populairder is dan de ander. Dit artikel betoogt een duidelijke voorkeur. Ben jij het met de schrijver van het artikel eens? Leg uit waarom je het hier wel of niet mee eens bent met behulp van een argument dat in het artikel wordt genoemd.","title":"Leesopdracht (30%)"},{"location":"week2/practicum.html","text":"Practicum week 2 \u2013 HTML en CSS (2) \u00b6 Test your skills \u00b6 Tijdens het hoorcollege is uitgebreid stilgestaan bij de positionering van elementen. We beginnen dit practicum met een twee eenvoudige oefeningen die te vinden zijn op MDN . De nieuwssite \u00b6 Deze en volgende week gaan we werken aan een mooie nieuwssite. Volgende week gaan we daar met behulp van JavaScript interactiviteit aan toevoegen; deze week beginnen we met de boel een beetje flexibeler, fraaier en moderner maken. Download de zip met de nodige bestanden , pak hem uit en open index.html in een browser. Zoals je ziet is de site momenteel nogal rommelig en onprofessioneel vormgegeven. Bestudeer de index.css om je een beeld te vormen van hoe \u00e9\u00e9n en ander is aangepakt. De pagina bestaat uit een aantal onderdelen: de titel met daaronder wat rubrieken (Cultuur, Binnenland, Buitenland, ...). Dan heb je aan de linkerkant de hoofdartikelen (iets met bobslee\u00ebn en bezinepompen) en aan de rechterkant wat overige informatie en reclame. Om het spreken hierover wat te vereenvoudigen, hebben we de verschillende onderdelen in het plaatje hieronder even expliciet benoemd. De titel en rubrieken. \u00b6 De pagina heeft nu niet een heel nieuwswaardige uitstraling: overal is het lettertype hetzelfde en om historische redenen is het gebruikelijk dat nieuws overtuigende overkomt wanneer in ieder geval de titel van de site een schreefletter heeft. Bovendien is het stom dat deze tekst r\u00fccktsichlos gecenteerd wordt. Lijn zowel de titel als de rubrieken links uit. Geef de titel ('Het Nieuws') een schreefletter, bijvoorbeeld een Garamond of Baskerville . Zorg er daarbij voor dat er altijd kan worden teruggevallen op het systeem-lettertype met schreef. Zet tenslotte, nu je toch bezig bent, de type van de titel om in bovenkast(kapitalen, hoofdletters). Voorzie de verschillende links in de rubrieke van wat meer ruimte, zodat het geheel een wat professionelere uitstraling krijgt. Zoals je ziet hebben zowel de titel als de rubrieken een klasse shadow-divider . Maak van dit gegeven gebruik om deze elementen wat duidelijker voor het voetlicht te brengen; denk hierbij aan de gradient , box-shadow of transform die we tijdens het plenaire deel hebben laten zien. Box shadow Bekijk ook deze tool om een fraaie box-shadow te cre\u00ebren. Flexibele vormgeving \u00b6 Momenteel is de site niet echt flexibel: de inhoud past zich niet aan aan de grootte van het scherm (de 'viewport') omdat de breedte van de div s hard in pixels is gecodeerd. Dit heeft tot gevolg dat wanneer je je schermgrootte verandert gedeelten van de site buiten beeld komen. Tijdens het plenaire deel hebben we gesproken over de css-units vw en vh . Maak van deze properties gebruik zodat de artikelen zo'n tweederde van de schermbreedte gebruiken en de sidebar de resterende eenderde voor z'n rekening neemt. Hou wel in de gaten dat de afbeeldingen bij de artikelen meeschalen. Check je uitwerking door je schermgrootte te vergroten en te verkleinen. Blurring the images \u00b6 Om de site wat moderner te maken, gaan we de plaatjes bij de nieuwsitems animeren. Maak gebruik van filter:blur(10px) om deze afbeeldingen van scherp naar vaag en weer omgekeerd vorm te geven. Maak een animatie waarbij dit elke vier seconden gebeurt. Intensief Let op: je kunt gekke en leuke dingen doen met blur , maar hou er rekening mee dat dit behoorlijk processor-intensief is. Zie deze discussie op StackOverflow . Denk ook aan de experimenten met Lighthouse die we vorige week gedaan hebben. Hou er rekening mee dat site normaliter primair bedoeld is om informatie over te dragen en dat dit soort grappige effecten het best spaarzaam ingezet worden. De sidebar beter maken \u00b6 Tot nu toe hebben we ons op de artikelen zelf gericht, maar de sidebar behoeft ook enige aandacht. Realiseer de volgende punten: de tekst van de elementen in de sidebar is gecenteerd de verschillende elementen hebben zo'n 50px afstand tot elkaar aan de bovenkant wordt een gekleurd balkje gezet knoppen in de sidebar hebben een speciale achtergrond- en letterkleur achtergrondkleur van die elementen is lichtgrijs Let op: je moet voor alle kleuren die je gebruikt een variabele maken en die gebruiken met behulp van var . Media queries \u00b6 breedte aanpassen De artikelen en de sidebar blijven nu altijd de beschikbare breedte verdelen. Dit is niet handig wanneer dit erg klein dreigt te worden. Zorg er met behulp van een Media Query voor dat de rechterkolom verdwijnt (onder de artikelen wordt gezet) wanneer de breedte van het scherm minder is dan 750px. darkmode toevoegen Veel mensen hebben hun computer tegenwoordig standaard op dark mode staan, waarbij de achtergrond donker is en de letters licht. Maak gebruik van een Media Query om dit ook voor onze site te realiseren. Je hoeft hierbij niet alle kleuren van een donkere en lichte variante te voorzien: het volstaat dat je de achtergrondkleur van de pagina zelf aanpast en de kleur van de letters, zodat alles nog wel leesbaar blijft. dark mode Hoewel dark mode tegenwoordig behoorlijk populair is, is er weinig wetenschappelijk bewijs te vinden waaruit zou blijken dat dit beter zou zijn voor je ogen. Het kan er wel voor zorgen dat je batterij wat langer meegaat. Zie bijvoorbeeld dit artikel op visioncenter.com , of dit stuk op howtogeek.com . Testen van darkmode In Google Chrome kun je goed de verschillende renderingen voor dark of light mode testen. Met de developer-tools open klik je op cmd-P en typ je 'rendering'. In het scherm dat dan verschijnt scroll je iets naar beneden om de CSS-media feature prefers-color-scheme optie te selecteren. Flexbox \u00b6 Tijdens het hoorcollege zijn verschillende waarden van display besproken (zie eventueel nog de documentatie op MDN ). Voor de opzet van onze website is het gebruik van de flexbox eigenlijk het meest voor de hand liggend: dan worden de artikelen vanzelf flexbox-item s en kun je er voor zorgen dat deze netjes en direct onder elkaar worden weergegeven. Pas de css aan, zodat hierbij gebruik gemaakt wordt van de flexbox .","title":"Practicum"},{"location":"week2/practicum.html#practicum-week-2-html-en-css-2","text":"","title":"Practicum week 2 \u2013 HTML en CSS (2)"},{"location":"week2/practicum.html#test-your-skills","text":"Tijdens het hoorcollege is uitgebreid stilgestaan bij de positionering van elementen. We beginnen dit practicum met een twee eenvoudige oefeningen die te vinden zijn op MDN .","title":"Test your skills"},{"location":"week2/practicum.html#de-nieuwssite","text":"Deze en volgende week gaan we werken aan een mooie nieuwssite. Volgende week gaan we daar met behulp van JavaScript interactiviteit aan toevoegen; deze week beginnen we met de boel een beetje flexibeler, fraaier en moderner maken. Download de zip met de nodige bestanden , pak hem uit en open index.html in een browser. Zoals je ziet is de site momenteel nogal rommelig en onprofessioneel vormgegeven. Bestudeer de index.css om je een beeld te vormen van hoe \u00e9\u00e9n en ander is aangepakt. De pagina bestaat uit een aantal onderdelen: de titel met daaronder wat rubrieken (Cultuur, Binnenland, Buitenland, ...). Dan heb je aan de linkerkant de hoofdartikelen (iets met bobslee\u00ebn en bezinepompen) en aan de rechterkant wat overige informatie en reclame. Om het spreken hierover wat te vereenvoudigen, hebben we de verschillende onderdelen in het plaatje hieronder even expliciet benoemd.","title":"De nieuwssite"},{"location":"week2/practicum.html#de-titel-en-rubrieken","text":"De pagina heeft nu niet een heel nieuwswaardige uitstraling: overal is het lettertype hetzelfde en om historische redenen is het gebruikelijk dat nieuws overtuigende overkomt wanneer in ieder geval de titel van de site een schreefletter heeft. Bovendien is het stom dat deze tekst r\u00fccktsichlos gecenteerd wordt. Lijn zowel de titel als de rubrieken links uit. Geef de titel ('Het Nieuws') een schreefletter, bijvoorbeeld een Garamond of Baskerville . Zorg er daarbij voor dat er altijd kan worden teruggevallen op het systeem-lettertype met schreef. Zet tenslotte, nu je toch bezig bent, de type van de titel om in bovenkast(kapitalen, hoofdletters). Voorzie de verschillende links in de rubrieke van wat meer ruimte, zodat het geheel een wat professionelere uitstraling krijgt. Zoals je ziet hebben zowel de titel als de rubrieken een klasse shadow-divider . Maak van dit gegeven gebruik om deze elementen wat duidelijker voor het voetlicht te brengen; denk hierbij aan de gradient , box-shadow of transform die we tijdens het plenaire deel hebben laten zien. Box shadow Bekijk ook deze tool om een fraaie box-shadow te cre\u00ebren.","title":"De titel en rubrieken."},{"location":"week2/practicum.html#flexibele-vormgeving","text":"Momenteel is de site niet echt flexibel: de inhoud past zich niet aan aan de grootte van het scherm (de 'viewport') omdat de breedte van de div s hard in pixels is gecodeerd. Dit heeft tot gevolg dat wanneer je je schermgrootte verandert gedeelten van de site buiten beeld komen. Tijdens het plenaire deel hebben we gesproken over de css-units vw en vh . Maak van deze properties gebruik zodat de artikelen zo'n tweederde van de schermbreedte gebruiken en de sidebar de resterende eenderde voor z'n rekening neemt. Hou wel in de gaten dat de afbeeldingen bij de artikelen meeschalen. Check je uitwerking door je schermgrootte te vergroten en te verkleinen.","title":"Flexibele vormgeving"},{"location":"week2/practicum.html#blurring-the-images","text":"Om de site wat moderner te maken, gaan we de plaatjes bij de nieuwsitems animeren. Maak gebruik van filter:blur(10px) om deze afbeeldingen van scherp naar vaag en weer omgekeerd vorm te geven. Maak een animatie waarbij dit elke vier seconden gebeurt. Intensief Let op: je kunt gekke en leuke dingen doen met blur , maar hou er rekening mee dat dit behoorlijk processor-intensief is. Zie deze discussie op StackOverflow . Denk ook aan de experimenten met Lighthouse die we vorige week gedaan hebben. Hou er rekening mee dat site normaliter primair bedoeld is om informatie over te dragen en dat dit soort grappige effecten het best spaarzaam ingezet worden.","title":"Blurring the images"},{"location":"week2/practicum.html#de-sidebar-beter-maken","text":"Tot nu toe hebben we ons op de artikelen zelf gericht, maar de sidebar behoeft ook enige aandacht. Realiseer de volgende punten: de tekst van de elementen in de sidebar is gecenteerd de verschillende elementen hebben zo'n 50px afstand tot elkaar aan de bovenkant wordt een gekleurd balkje gezet knoppen in de sidebar hebben een speciale achtergrond- en letterkleur achtergrondkleur van die elementen is lichtgrijs Let op: je moet voor alle kleuren die je gebruikt een variabele maken en die gebruiken met behulp van var .","title":"De sidebar beter maken"},{"location":"week2/practicum.html#media-queries","text":"breedte aanpassen De artikelen en de sidebar blijven nu altijd de beschikbare breedte verdelen. Dit is niet handig wanneer dit erg klein dreigt te worden. Zorg er met behulp van een Media Query voor dat de rechterkolom verdwijnt (onder de artikelen wordt gezet) wanneer de breedte van het scherm minder is dan 750px. darkmode toevoegen Veel mensen hebben hun computer tegenwoordig standaard op dark mode staan, waarbij de achtergrond donker is en de letters licht. Maak gebruik van een Media Query om dit ook voor onze site te realiseren. Je hoeft hierbij niet alle kleuren van een donkere en lichte variante te voorzien: het volstaat dat je de achtergrondkleur van de pagina zelf aanpast en de kleur van de letters, zodat alles nog wel leesbaar blijft. dark mode Hoewel dark mode tegenwoordig behoorlijk populair is, is er weinig wetenschappelijk bewijs te vinden waaruit zou blijken dat dit beter zou zijn voor je ogen. Het kan er wel voor zorgen dat je batterij wat langer meegaat. Zie bijvoorbeeld dit artikel op visioncenter.com , of dit stuk op howtogeek.com . Testen van darkmode In Google Chrome kun je goed de verschillende renderingen voor dark of light mode testen. Met de developer-tools open klik je op cmd-P en typ je 'rendering'. In het scherm dat dan verschijnt scroll je iets naar beneden om de CSS-media feature prefers-color-scheme optie te selecteren.","title":"Media queries"},{"location":"week2/practicum.html#flexbox","text":"Tijdens het hoorcollege zijn verschillende waarden van display besproken (zie eventueel nog de documentatie op MDN ). Voor de opzet van onze website is het gebruik van de flexbox eigenlijk het meest voor de hand liggend: dan worden de artikelen vanzelf flexbox-item s en kun je er voor zorgen dat deze netjes en direct onder elkaar worden weergegeven. Pas de css aan, zodat hierbij gebruik gemaakt wordt van de flexbox .","title":"Flexbox"},{"location":"week3/index.html","text":"Week 3: Javascript \u00b6 Deze week verlaten we het meer user-design gerichte onderwerp en gaan we in op het interactief maken van onze webpagina's. Dat doen we met behulp van de meest populaire taal op StackOverflow: JavaScript. We bespreken het domein waarin deze taal voorkomt, waarin hij verschilt van de andere talen die al besproken zijn (met name op het gebied van syntax, maar toch zeker ook op met betrekking op missie en doel) en hoe je een project hiermee zou kunnen opzetten. Hoorcollege \u00b6 Na een zeer korte historische inleiding bespreken we de rol en positie die JavaScript inneemt in het hedendaagse vakgebied in het algemeen en in web-development in het bijzonder. We laten zien hoe JavaScript wordt uitgevoerd en welke gevolgen dat heeft voor de ontwikkeling. Vervolgens gaan we in op client-side scripting met JavaScript, en bespreken we onder andere syntax, variabelen, verschillende data types, functies, objecten, events en loops. Ook behandelen we DOM manipulation: het aanpassen van de HTML elementen in de Document Object Model met behulp van bijvoorbeeld een query selector. Aan de hand van live coding laten we tenslotte zien hoe je een frontend-project opzet, wat een goeie manier van werken is en tegen welke problemen je aan zult (kunnen) lopen. Practicum \u00b6 In het practicum gaan we de theoretische kennis op een praktische manier toepassen. Aan de hand van kleine concrete opdrachten worden de belangrijkste concepten en constructies ge\u00efllustreerd. Hierbij zal met name stilgestaan worden bij enerzijdss eigenschappen die JavaScript uniek maken en anderzijds een vergelijking met reeds besproken talen gemaakt worden. Tijdens dit practicum zullen methoden en technieken besproken worden die nodig zijn voor het memory-spel. Literatuur \u00b6 Er is de wereld aan literatuur over JavaScript te vinden. Zelf vinden we de serie You Don't Know JS van Kyle Simpson erg fijn: hij bespreekt de echte ins en outs van deze taal. Natuurlijk kun je ook op w3schools een goeie introductie krijgen van hoe en wat in JavaScript. Het nadeel van deze site is dat het niet heel diep gaat en een beetje cherry picking blijft. Wat dat betreft kun je, als altijd, beter te rade gaan bij MDN . Als feitelijke makers van JavaScript houden ze ook de documentatie hiervan goed bij. Als je op zoek bent naar een online training op het gebied van JavaScript (of een andere front-end techniek) dan raden we je Frontend Masters aan.","title":"Inleiding"},{"location":"week3/index.html#week-3-javascript","text":"Deze week verlaten we het meer user-design gerichte onderwerp en gaan we in op het interactief maken van onze webpagina's. Dat doen we met behulp van de meest populaire taal op StackOverflow: JavaScript. We bespreken het domein waarin deze taal voorkomt, waarin hij verschilt van de andere talen die al besproken zijn (met name op het gebied van syntax, maar toch zeker ook op met betrekking op missie en doel) en hoe je een project hiermee zou kunnen opzetten.","title":"Week 3: Javascript"},{"location":"week3/index.html#hoorcollege","text":"Na een zeer korte historische inleiding bespreken we de rol en positie die JavaScript inneemt in het hedendaagse vakgebied in het algemeen en in web-development in het bijzonder. We laten zien hoe JavaScript wordt uitgevoerd en welke gevolgen dat heeft voor de ontwikkeling. Vervolgens gaan we in op client-side scripting met JavaScript, en bespreken we onder andere syntax, variabelen, verschillende data types, functies, objecten, events en loops. Ook behandelen we DOM manipulation: het aanpassen van de HTML elementen in de Document Object Model met behulp van bijvoorbeeld een query selector. Aan de hand van live coding laten we tenslotte zien hoe je een frontend-project opzet, wat een goeie manier van werken is en tegen welke problemen je aan zult (kunnen) lopen.","title":"Hoorcollege"},{"location":"week3/index.html#practicum","text":"In het practicum gaan we de theoretische kennis op een praktische manier toepassen. Aan de hand van kleine concrete opdrachten worden de belangrijkste concepten en constructies ge\u00efllustreerd. Hierbij zal met name stilgestaan worden bij enerzijdss eigenschappen die JavaScript uniek maken en anderzijds een vergelijking met reeds besproken talen gemaakt worden. Tijdens dit practicum zullen methoden en technieken besproken worden die nodig zijn voor het memory-spel.","title":"Practicum"},{"location":"week3/index.html#literatuur","text":"Er is de wereld aan literatuur over JavaScript te vinden. Zelf vinden we de serie You Don't Know JS van Kyle Simpson erg fijn: hij bespreekt de echte ins en outs van deze taal. Natuurlijk kun je ook op w3schools een goeie introductie krijgen van hoe en wat in JavaScript. Het nadeel van deze site is dat het niet heel diep gaat en een beetje cherry picking blijft. Wat dat betreft kun je, als altijd, beter te rade gaan bij MDN . Als feitelijke makers van JavaScript houden ze ook de documentatie hiervan goed bij. Als je op zoek bent naar een online training op het gebied van JavaScript (of een andere front-end techniek) dan raden we je Frontend Masters aan.","title":"Literatuur"},{"location":"week3/memory.html","text":"Memory week 3 \u00b6 Tot nu toe had het memory spel nog geen interactie en functionaliteit: het ziet er wel mooi uit, maar de kaarten kunnen nog niet omgedraaid worden en de score wordt nog niet bijgehouden. Maar dat ga je vanaf nu veranderen; je gaat met Javascript aan de slag. Voeg de volgende functionaliteiten toe aan het spel: Bij het begin van het spel worden in eerste instantie willekeurig letters uit het alfabet gekozen (later zullen we dit nog aanpassen). Zorg ervoor dat er de helft zoveel willekeurige letters worden gekozen als er kaarten zijn. De speler klikt op een gesloten kaart: de kleur van de kaart verandert in de kleur die bij open hoort en de letter die bij deze kaart hoort wordt weergegeven. Vervolgens klikt de speler op een andere gesloten kaart. Ook deze kaart verandert van kleur en de bijhorende letter wordt getoond. Als beide letters gelijk zijn worden de letters in deze cellen permanent getoond. De kleur van de kaarten wordt weer veranderd, om duidelijk te maken dat ze gevonden zijn. Als beide kaarten verschillende letters bevatten, blijven de kaarten open staan. Wanneer er op dat moment op een andere kaart geklikt wordt, worden beide geopende verschillende kaarten weer omgedraaid en de nieuwe kaart getoond. Wanneer een speler op een al omgedraaide kaart klikt gebeurt er niets. Als alle kaarten zijn omgedraaid, wordt de speler gefeliciteerd. Bedenk zelf een fijne manier om dit te doen.","title":"Memory"},{"location":"week3/memory.html#memory-week-3","text":"Tot nu toe had het memory spel nog geen interactie en functionaliteit: het ziet er wel mooi uit, maar de kaarten kunnen nog niet omgedraaid worden en de score wordt nog niet bijgehouden. Maar dat ga je vanaf nu veranderen; je gaat met Javascript aan de slag. Voeg de volgende functionaliteiten toe aan het spel: Bij het begin van het spel worden in eerste instantie willekeurig letters uit het alfabet gekozen (later zullen we dit nog aanpassen). Zorg ervoor dat er de helft zoveel willekeurige letters worden gekozen als er kaarten zijn. De speler klikt op een gesloten kaart: de kleur van de kaart verandert in de kleur die bij open hoort en de letter die bij deze kaart hoort wordt weergegeven. Vervolgens klikt de speler op een andere gesloten kaart. Ook deze kaart verandert van kleur en de bijhorende letter wordt getoond. Als beide letters gelijk zijn worden de letters in deze cellen permanent getoond. De kleur van de kaarten wordt weer veranderd, om duidelijk te maken dat ze gevonden zijn. Als beide kaarten verschillende letters bevatten, blijven de kaarten open staan. Wanneer er op dat moment op een andere kaart geklikt wordt, worden beide geopende verschillende kaarten weer omgedraaid en de nieuwe kaart getoond. Wanneer een speler op een al omgedraaide kaart klikt gebeurt er niets. Als alle kaarten zijn omgedraaid, wordt de speler gefeliciteerd. Bedenk zelf een fijne manier om dit te doen.","title":"Memory week 3"},{"location":"week3/practicum.html","text":"Week 3 - JavaScript \u00b6 Deze week gaan we verder met de nieuwssite waar we vorige week ook mee hebben gewerkt. We gaan met JavaScript deze site 'tot leven wekken' in de verschillende oefeningen. Bij elke oefening is het de bedoeling dat je all\u00e9\u00e9n JavaScript schrijft, alle benodigde HTML en CSS is namelijk al gegeven. Download deze zip , pak hem uit en open index.html in een browser. Je hoeft dit niet per se via een server te doen: omdat alles wat we doen in de browser gebeurt, hoef je geen echte verbinding met een backend te hebben. 1. Date (15 minuten) \u00b6 Net boven het featured artikel staat een datum. Deze staat hardcoded in de HTML. Zorg er met het Date object voor dat hier altijd de datum van vandaag wordt getoond in hetzelfde format als de datum die er nu hardcoded in staat. Gebruik hiervoor toLocaleDateString en geef de juiste opties mee. Gebruik vervolgens innerHtml om de datum in het juiste HTML element te tonen. 2. Timing Events (15 minuten) \u00b6 2a. Automatisch wisselen tussen featured artikelen \u00b6 Momenteel is er maar \u00e9\u00e9n featured artikel bovenaan de lijst met nieuwsartikelen te zien. Zorg ervoor dat deze elke 7 seconden afwisselt met de andere featured artikelen. De andere staan wel in het HTML document, maar staan momenteel nog op display: hidden . Je hebt getElementsByClassName nodig om de lijst van featured artikelen te selecteren. Met een setInterval kun je vervolgens door deze lijst heen for-loopen. Maak vervolgens bij elke keer dat het interval 'af gaat' \u00e9\u00e9n artikel zichtbaar, en verstop de rest. 2b. Een irritante pop-up tonen na 10 seconden \u00b6 In het HTML bestand staat een element met id subscription-pop-up . Deze is nu nog niet zichtbaar ( display: none ). Zorg ervoor dat deze 10 seconden na het openen van de pagina zichtbaar wordt met een setTimeout . Zodra je de pop-up zichtbaar hebt gemaakt, zorg dan ook dat het scrollen even niet mogelijk is door overflow toe te voegen aan de gehele body . Voeg ook een EventListener toe voor het click event van de knop met id reject-subscription om te zorgen dat de pop-up weer verdwijnt. 3. User Events (30 minuten) \u00b6 a. Ondertitel tonen bij hover over featured artikel \u00b6 Net zoals de 'listed' artikelen, heeft hebben de 'featured' artikelen een ondertitel. Deze staan al in de HTML, maar zijn nog niet zichtbaar. Zorg ervoor dat de ondertitels zichtbaar worden zodra de muis over het artikel zweeft. meerdere featured artikelen Let op: aangezien er meerdere featured artikelen zijn, kun je geen id toekennen aan het element waar de ondertitel in staat. Maak daarom gebruik van getElementsByClassName en voeg een EventListener toe aan alle artikelen dat gebruik maakt van de mouseover en mouseleave events. Zorg er vervolgens voor dat je op het juiste moment de CSS class visible aan de ondertitel toevoegt of juist verwijdert. b. Een irritante pop-up tonen bij eerste keer scrollen \u00b6 In het HTML bestand staat een element met id cookies-pop-up . Deze is nu nog niet zichtbaar ( display: none ). Zorg ervoor dat deze zichtbaar wordt bij de eerste keer scrollen. Voeg hiervoor een EventListener toe voor het scroll event aan de gehele pagina. Zodra je de pop-up zichtbaar hebt gemaakt, zorg dan ook dat het scrollen even niet mogelijk is door overflow toe te voegen aan de gehele body . Voeg ook een EventListener toe voor het click event van de knop met id accept-cookies om te zorgen dat de pop-up weer verdwijnt. Zorg dan ook dat de EventListener voor scroll verwijderd wordt, zodat je niet oneindig koekjes moet blijven accepteren... 4. Forms (30 minuten) \u00b6 De poll over de coronamaatregelen heeft momenteel nog geen functionaliteit, maar met JavaScript kunnen we ervoor zorgen dat je client-side kunt stemmen. Je hoeft geen extra HTML elementen toe te voegen of aanpassingen daarin te doen, de benodigde elementen staan al voor je klaar. a. De resultaten client-side opslaan \u00b6 De eerste stap is het opslaan van de resultaten in de localStorage . In het form element zie je dat de poll uit drie opties bestaat die elk een uniek id bevatten. Maak gebruik van een EventListener dat luistert naar het submit event van het form element. Tel vervolgens het aantal stemmen per optie en bewaar de resultaten in de localStorage . Voor deze stap is het genoeg om de resultaten uit te printen in de console. b. Resultaten laten zien zodra er gestemd is \u00b6 De volgende stap is het tonen van de resultaten die je al hebt kunnen opslaan in de localStorage . Onder het element waar de poll in staat, zie je een element met id poll-results . Deze kun je gebruiken om op de juiste plek met innerHTML de resultaten toe te voegen nadat er gestemd is. c. Het formulier valideren \u00b6 Nu ga je valideren of de gebruiker \u00fcberhaupt een optie heeft aangevinkt, voordat we de resultaten tonen. Zo lang de gebruiker nog niets heeft aangevinkt, maar wel de stemknop gebruikt, mogen de resultaten nog niet worden getoond, en verschijnt er een foutmelding. De foutmelding staat al in het HTML document en heeft als id form-warning . d. Teruggaan naar de poll \u00b6 In de laatste stap zorg je ervoor dat je met de knop \"Terug naar poll\" de poll weer te zien krijgt in plaats van de resultaten, zodat je opnieuw kunt stemmen (en vals kunt spelen?). Voeg hiervoor een EventListener toe aan de knop, en schrijf een functie waarmee je de zichtbaarheid van poll vs resultaten kan toggelen. 5. Animaties (30 minuten) \u00b6 a. Bewegend chat icoontje \u00b6 Rechts onderaan de pagina zie je een chat icoontje. Zorg met een setInterval dat elke 0,1 seconde de hoogte van het icoon wordt aangepast zodat het icoontje continu groter en dan weer kleiner wordt. Dat betekent dat je in een variabele bijhoudt welke richting het icoon op beweegt om te kunnen bepalen of je een pixel erbij moet optellen of juist aftrekken. b. Bij hover over artikel, doorzichtigheid van overige artikelen animeren \u00b6 Alle 'listed' artikelen hebben dezelfde class, namelijk listed . Zorg ervoor met getElementsByClassName dat deze artikelen de class see-through krijgen die de doorzichtigheid van de artikelen animeert, zodra je over een artikel hovert met de muis. Doe dit alleen niet voor het artikel waarover je hovert. Hierdoor krijgt het geselecteerde artikel de focus. Zodra de muis over geen enkel artikel zweeft, verdwijnen alle animaties. Doe dit met getElementsByClassName , EventListeners en een aantal for loops.","title":"Practicum"},{"location":"week3/practicum.html#week-3-javascript","text":"Deze week gaan we verder met de nieuwssite waar we vorige week ook mee hebben gewerkt. We gaan met JavaScript deze site 'tot leven wekken' in de verschillende oefeningen. Bij elke oefening is het de bedoeling dat je all\u00e9\u00e9n JavaScript schrijft, alle benodigde HTML en CSS is namelijk al gegeven. Download deze zip , pak hem uit en open index.html in een browser. Je hoeft dit niet per se via een server te doen: omdat alles wat we doen in de browser gebeurt, hoef je geen echte verbinding met een backend te hebben.","title":"Week 3 - JavaScript"},{"location":"week3/practicum.html#1-date-15-minuten","text":"Net boven het featured artikel staat een datum. Deze staat hardcoded in de HTML. Zorg er met het Date object voor dat hier altijd de datum van vandaag wordt getoond in hetzelfde format als de datum die er nu hardcoded in staat. Gebruik hiervoor toLocaleDateString en geef de juiste opties mee. Gebruik vervolgens innerHtml om de datum in het juiste HTML element te tonen.","title":"1. Date (15 minuten)"},{"location":"week3/practicum.html#2-timing-events-15-minuten","text":"","title":"2. Timing Events (15 minuten)"},{"location":"week3/practicum.html#3-user-events-30-minuten","text":"","title":"3. User Events (30 minuten)"},{"location":"week3/practicum.html#4-forms-30-minuten","text":"De poll over de coronamaatregelen heeft momenteel nog geen functionaliteit, maar met JavaScript kunnen we ervoor zorgen dat je client-side kunt stemmen. Je hoeft geen extra HTML elementen toe te voegen of aanpassingen daarin te doen, de benodigde elementen staan al voor je klaar.","title":"4. Forms (30 minuten)"},{"location":"week3/practicum.html#5-animaties-30-minuten","text":"","title":"5. Animaties (30 minuten)"},{"location":"week4/index.html","text":"Week 4: Javascript async \u00b6 Nadat vorige week de basis is gelegd, gaan we deze week in op \u00e9\u00e9n van de meest fundamentele eigenschappen van Javascript: asynchroon programmeren . De meeste programmeertalen die je tot nu toe bent tegengekomen gaan in basis uit van een call stack waarbij functies of methoden elkaar aanroepen en wachten totdat die call is afgerond voordat de caller zelf door kan gaan. JavaScript is van meet af aan ingesteld op het werken met calls die lange tijd in beslag kunnen nemen, bijvoorbeeld data ophalen over een netwerk. Om deze reden (en omdat Javascript altijd maar in \u00e9\u00e9n thread draait) heeft Brendan Eich al vanaf het prille begint gewerkt met zogenaamde callback functions . Hoorcollege \u00b6 In het hoorcollege wordt de theorie van asynchroon programmeren toegelicht. We bespreken de noodzaak van deze techniek en de verschillende manieren waarop aan deze noodzaak voldaan kan worden. Aan de hand van de werking van de callback queue en de event loop wordt toegelicht hoe functies conditioneel gemaakt kunnen worden \u2013 en hoe ze pas kunnen worden aangeroepen wanneer er aan die conditie voldaan is. We bespreken de theoretische werking van deze techniek en laten zien hoe deze concreet is gerealiseerd in de browser (in de V8-engine ) en in nodejs . Vervolgens gaan we in op het concept van Promises en het aan elkaar rijgen van functie-aanroepen. We kijken naar goede architecturen om dit soort code effici\u00ebnt en leesbaar te maken. Practicum \u00b6 In het practicum wordt de theorie uit het hoorcollege praktisch uitgewerkt. Aan de hand van een aantal kleine specifieke opgaven wordt Javascript ingezet om data van externe bronnen op te halen en te verwerken. Hierbij maken we gebruik van technieken die zowel in de browser als op de command line werken. We kijken hoe we data uit verschillende bronnen tot \u00e9\u00e9n geheel kunnen integreren, zonder problemen te ondervinden van latency of kapotte links. Literatuur \u00b6 Simpson, Kyle (2015), Async and Performance . Uit de (aan te raden) serie You Don't Know JavaScript . Dit boek is eenvoudig via de Hanze mediatheek te vinden. fetch op MDN","title":"Inleiding"},{"location":"week4/index.html#week-4-javascript-async","text":"Nadat vorige week de basis is gelegd, gaan we deze week in op \u00e9\u00e9n van de meest fundamentele eigenschappen van Javascript: asynchroon programmeren . De meeste programmeertalen die je tot nu toe bent tegengekomen gaan in basis uit van een call stack waarbij functies of methoden elkaar aanroepen en wachten totdat die call is afgerond voordat de caller zelf door kan gaan. JavaScript is van meet af aan ingesteld op het werken met calls die lange tijd in beslag kunnen nemen, bijvoorbeeld data ophalen over een netwerk. Om deze reden (en omdat Javascript altijd maar in \u00e9\u00e9n thread draait) heeft Brendan Eich al vanaf het prille begint gewerkt met zogenaamde callback functions .","title":"Week 4: Javascript async"},{"location":"week4/index.html#hoorcollege","text":"In het hoorcollege wordt de theorie van asynchroon programmeren toegelicht. We bespreken de noodzaak van deze techniek en de verschillende manieren waarop aan deze noodzaak voldaan kan worden. Aan de hand van de werking van de callback queue en de event loop wordt toegelicht hoe functies conditioneel gemaakt kunnen worden \u2013 en hoe ze pas kunnen worden aangeroepen wanneer er aan die conditie voldaan is. We bespreken de theoretische werking van deze techniek en laten zien hoe deze concreet is gerealiseerd in de browser (in de V8-engine ) en in nodejs . Vervolgens gaan we in op het concept van Promises en het aan elkaar rijgen van functie-aanroepen. We kijken naar goede architecturen om dit soort code effici\u00ebnt en leesbaar te maken.","title":"Hoorcollege"},{"location":"week4/index.html#practicum","text":"In het practicum wordt de theorie uit het hoorcollege praktisch uitgewerkt. Aan de hand van een aantal kleine specifieke opgaven wordt Javascript ingezet om data van externe bronnen op te halen en te verwerken. Hierbij maken we gebruik van technieken die zowel in de browser als op de command line werken. We kijken hoe we data uit verschillende bronnen tot \u00e9\u00e9n geheel kunnen integreren, zonder problemen te ondervinden van latency of kapotte links.","title":"Practicum"},{"location":"week4/index.html#literatuur","text":"Simpson, Kyle (2015), Async and Performance . Uit de (aan te raden) serie You Don't Know JavaScript . Dit boek is eenvoudig via de Hanze mediatheek te vinden. fetch op MDN","title":"Literatuur"},{"location":"week4/memory.html","text":"Week 4 - Memory 2 - tweede toetsmoment \u00b6 Memory 2 \u00b6 Voor dit toetsmoment moeten alle functionele eisen die in week drie besproken zijn gerealiseerd zijn. Toevoeging voor deze week is om afbeeldingen uit externe API's te gebruiken, in plaats van letters uit het alfabet. Denk hierbij bijvoorbeeld aan: Lorem Picsum DogAPI The Cats API Maar andere externe api's zijn natuurlijk ook mogelijk. Verander de keuze-optie aan de rechterkant van het scherm zodat de speler kan kiezen wat voor soort plaatjes hij of zij op de kaartjes wil zien: Maak gebruik van Promise s en fetch voor het ophalen van de afbeeldingen. Zorg er voor dat de gesloten kaarten ook de kleur krijgen die de speler met de color picker heeft uitgezocht. Ook tijdens het spelen moet je deze kleur kunnen aanpassen. Beoordeling Naast de functionaliteit zullen wij ook beoordelen op leesbaarheid en netheid van je code. Ook blijft accessibility en responsiveness belangrijk. Gebruik geen libraries en frameworks. Leesopgaven \u00b6 Lees hoofdstuk 2.5 van het proefschrift JavaScript: an analysis of the language and its impact on web development door Thomas Henson. Welke methode wordt er voornamelijk beschreven om een idee te krijgen bij de impact van JavaScript op webpagina's? Voer deze methode zelf ook uit in je browser en bekijk vier van je favoriete websites. Wat valt je op? Lees hoofdstuk 2.7 \"Will it still be relevant in the future?\" van hetzelfde proefschrift. Beschrijf een van de redenen die de schrijver noemt waardoor er andere talen dan JavaScript worden overwogen voor het web. Denk jij dat dit inderdaad een belangrijke reden is om JavaScript te vervangen? En waarom?","title":"Memory (toetsmoment)"},{"location":"week4/memory.html#week-4-memory-2-tweede-toetsmoment","text":"","title":"Week 4 - Memory 2 - tweede toetsmoment"},{"location":"week4/memory.html#memory-2","text":"Voor dit toetsmoment moeten alle functionele eisen die in week drie besproken zijn gerealiseerd zijn. Toevoeging voor deze week is om afbeeldingen uit externe API's te gebruiken, in plaats van letters uit het alfabet. Denk hierbij bijvoorbeeld aan: Lorem Picsum DogAPI The Cats API Maar andere externe api's zijn natuurlijk ook mogelijk. Verander de keuze-optie aan de rechterkant van het scherm zodat de speler kan kiezen wat voor soort plaatjes hij of zij op de kaartjes wil zien: Maak gebruik van Promise s en fetch voor het ophalen van de afbeeldingen. Zorg er voor dat de gesloten kaarten ook de kleur krijgen die de speler met de color picker heeft uitgezocht. Ook tijdens het spelen moet je deze kleur kunnen aanpassen. Beoordeling Naast de functionaliteit zullen wij ook beoordelen op leesbaarheid en netheid van je code. Ook blijft accessibility en responsiveness belangrijk. Gebruik geen libraries en frameworks.","title":"Memory 2"},{"location":"week4/memory.html#leesopgaven","text":"Lees hoofdstuk 2.5 van het proefschrift JavaScript: an analysis of the language and its impact on web development door Thomas Henson. Welke methode wordt er voornamelijk beschreven om een idee te krijgen bij de impact van JavaScript op webpagina's? Voer deze methode zelf ook uit in je browser en bekijk vier van je favoriete websites. Wat valt je op? Lees hoofdstuk 2.7 \"Will it still be relevant in the future?\" van hetzelfde proefschrift. Beschrijf een van de redenen die de schrijver noemt waardoor er andere talen dan JavaScript worden overwogen voor het web. Denk jij dat dit inderdaad een belangrijke reden is om JavaScript te vervangen? En waarom?","title":"Leesopgaven"},{"location":"week4/practicum.html","text":"Practicum week 4 \u00b6 Deze week gaan we werken met fetch en met Promises . We bouwen daarbij verder op de technieken die we in de vorige weken hebben besproken en waar we mee hebben geoefend. De bestanden voor deze week vind je in deze zip . Opgave 1a: omzetten van code in promises. \u00b6 Run en bestudeer het bestand cards.html . Hierin maken we gebruik van weer een API om een spel kaarten sequentieel op te halen. Hoewel deze code op zich nog redelijk overzichtelijk is, is het toch beter om dit om te zetten in een wat hedendaagsere manier van werken. Herschrijf deze code waarbij je gebruik maakt van Promise s. Opgave 1b: omzetten van een callback-hell in promises \u00b6 Run en bekijk het bestand numbers.html . Zoals je ziet wordt hier gebruik gemaakt van een externe API om interessante gegevens van een nummer op te halen. Bestudeer met name de werking van de functie getjson() . Deze methode wordt uitgebreid gebruikt in het stukje javascript dat hier onder staat. Je kunt je voorstellen dat dit niet heel handig is, qua broncode. Herschrijf deze code in de vorm van promises. Maak hierbij gebruik van Promises.all . Pas vervolgens de pagina aan zodat de bezoeker een getal kan invullen waar hij of zij interessante gegevens van te zien wil krijgen (momenteel is dat getal hard gecodeerd). Maak ook een dropdown om een keuze te bieden van het aantal gegevens dat er opgehaald worden. Je hoeft je niet druk te maken over mogelijke dubbele gegevens die over het getal worden getoond (maar dat mag natuurlijk wel). Opgave 2: een spinner \u00b6 Open het bestand scroller.html en bestudeer de werking hiervan. Zoals je ziet maken we gebruik van een grid-view om een grid van twee kolommen met plaatjes te laten zien. Op \u00e9\u00e9n na zijn al deze plaatjes momenteel een spinner, die duidelijk maakt dat er nog geen plaatje is ingeladen. Het is de bedoeling om wanneer de DOM is ingeladen de spinners te vervangen door echte plaatjes. Je kunt gebruik maken van de site https://picsum.photos/ : dit is een site waar je automatisch willekeurige plaatjes vandaan kunt halen. Maak gebruik van fetch en promises. Opgave 3: Oneindige scroll \u00b6 Zoals je ziet staat de laatste regel plaatjes iets onder de viewport . Het is de bedoeling dat er een nieuwe regel met twee willekeurige plaatjes aan de DOM wordt toegevoegd op het moment dat deze laatste regel helemaal in de viewport terecht is gekomen. Door dit telkens te doen kunnen we een oneindige scroll maken. De regel die je moet toevoegen is al voor je voorbereid in de html: we maken hier gebruik van de template -node . Maak gebruik van de methode importNode om deze node te laden op het moment dat de laatste regel helemaal te zien is. Pas van beide plaatjes in deze template de src aan en voeg het geheel toe aan de container . style en computedStyle In deze opgave moet je de css met behulp van JavaScript aanpassen. Op zich is dat niet heel lastig, maar het kan zinvol zijn je te realiseren dat er een verschil bestaat tussen de style en de computedStyle van een node . Lees eventueel de documentatie op MDN om een idee te krijgen van de verschillen tussen deze twee.","title":"Practicum"},{"location":"week4/practicum.html#practicum-week-4","text":"Deze week gaan we werken met fetch en met Promises . We bouwen daarbij verder op de technieken die we in de vorige weken hebben besproken en waar we mee hebben geoefend. De bestanden voor deze week vind je in deze zip .","title":"Practicum week 4"},{"location":"week4/practicum.html#opgave-1a-omzetten-van-code-in-promises","text":"Run en bestudeer het bestand cards.html . Hierin maken we gebruik van weer een API om een spel kaarten sequentieel op te halen. Hoewel deze code op zich nog redelijk overzichtelijk is, is het toch beter om dit om te zetten in een wat hedendaagsere manier van werken. Herschrijf deze code waarbij je gebruik maakt van Promise s.","title":"Opgave 1a: omzetten van code in promises."},{"location":"week4/practicum.html#opgave-1b-omzetten-van-een-callback-hell-in-promises","text":"Run en bekijk het bestand numbers.html . Zoals je ziet wordt hier gebruik gemaakt van een externe API om interessante gegevens van een nummer op te halen. Bestudeer met name de werking van de functie getjson() . Deze methode wordt uitgebreid gebruikt in het stukje javascript dat hier onder staat. Je kunt je voorstellen dat dit niet heel handig is, qua broncode. Herschrijf deze code in de vorm van promises. Maak hierbij gebruik van Promises.all . Pas vervolgens de pagina aan zodat de bezoeker een getal kan invullen waar hij of zij interessante gegevens van te zien wil krijgen (momenteel is dat getal hard gecodeerd). Maak ook een dropdown om een keuze te bieden van het aantal gegevens dat er opgehaald worden. Je hoeft je niet druk te maken over mogelijke dubbele gegevens die over het getal worden getoond (maar dat mag natuurlijk wel).","title":"Opgave 1b: omzetten van een callback-hell in promises"},{"location":"week4/practicum.html#opgave-2-een-spinner","text":"Open het bestand scroller.html en bestudeer de werking hiervan. Zoals je ziet maken we gebruik van een grid-view om een grid van twee kolommen met plaatjes te laten zien. Op \u00e9\u00e9n na zijn al deze plaatjes momenteel een spinner, die duidelijk maakt dat er nog geen plaatje is ingeladen. Het is de bedoeling om wanneer de DOM is ingeladen de spinners te vervangen door echte plaatjes. Je kunt gebruik maken van de site https://picsum.photos/ : dit is een site waar je automatisch willekeurige plaatjes vandaan kunt halen. Maak gebruik van fetch en promises.","title":"Opgave 2: een spinner"},{"location":"week4/practicum.html#opgave-3-oneindige-scroll","text":"Zoals je ziet staat de laatste regel plaatjes iets onder de viewport . Het is de bedoeling dat er een nieuwe regel met twee willekeurige plaatjes aan de DOM wordt toegevoegd op het moment dat deze laatste regel helemaal in de viewport terecht is gekomen. Door dit telkens te doen kunnen we een oneindige scroll maken. De regel die je moet toevoegen is al voor je voorbereid in de html: we maken hier gebruik van de template -node . Maak gebruik van de methode importNode om deze node te laden op het moment dat de laatste regel helemaal te zien is. Pas van beide plaatjes in deze template de src aan en voeg het geheel toe aan de container . style en computedStyle In deze opgave moet je de css met behulp van JavaScript aanpassen. Op zich is dat niet heel lastig, maar het kan zinvol zijn je te realiseren dat er een verschil bestaat tussen de style en de computedStyle van een node . Lees eventueel de documentatie op MDN om een idee te krijgen van de verschillen tussen deze twee.","title":"Opgave 3: Oneindige scroll"},{"location":"week5/index.html","text":"Week 5: Beveiliging en jwt \u00b6 Zo gauw een applicatie data van een andere computer haalt dan waarop deze zelf draait, of zo gauw je een applicatie via een netwerk aan andere computers beschkbaar stelt, krijg je te maken met beveiliging: hoe voorkom je dat kwaadwillenden beschikking krijgen over de data of over de code-base zelf. Omdat het web inmiddels volledig als applicatieplatform gezien wordt, zijn deze vragen voor dit thema bijzonder relevant. Vanzelfsprekend gaan we niet in op alle aspecten van beveiliging: daar is immers een hele eigen opleiding voor. We beperken ons tot de meest voor de hand liggende zaken die elke goede (web)-programmeur zou moeten inzetten om de applicaties op z'n minst een beetje te beschermen. Specifiek gaan we in op een techniek die sinds enige jaren hier veel voor wordt gebruikt: json web tokens . Hoorcollege \u00b6 Na een korte introductie over beveiliging bespreken we methoden en technieken waarmee webapplicaties veiliger gemaakt kunnen worden. Hierin passeren zaken als password hashing , het toevoegen van salt en 2FA de revue. In aansluiting hierop gaan we in op de problemen die met al deze technieken samenhangen en waarvoor json webtokens ( JWT ) een oplossing probeert te formeren. Aansluitend gaan we uitgebreid in op JWT . We bespreken de technische voordelen hiervan en laten een concrete implementatie zien. Practicum \u00b6 In het practicum gaan studenten zelf aan de slag met kleine concrete praktische opgaven. Er wordt met Javacript connectie gemaakt met een (gegeven) JWT-server, waarna gekeken wordt hoe voorkomen kan worden dat het token te lang niet wordt ververst, of wat er aan te doen valt wanneer dat wel het geval is. Tijdens dit practicum zal ook gekeken worden naar de voor- en nadelen van opslag van het token in een cookie of in de local storage . Dit biedt als extra'tje de mogelijkheid om te onderzoeken hoe data in de local storage kan worden opgeslagen en geadresseerd. Ook bespreken we hoe het token in de http-header van de request kan worden meegestuurd. Literatuur \u00b6 RFC 8725: JWT Best Current Practices How hackers hack JWT","title":"Inleiding"},{"location":"week5/index.html#week-5-beveiliging-en-jwt","text":"Zo gauw een applicatie data van een andere computer haalt dan waarop deze zelf draait, of zo gauw je een applicatie via een netwerk aan andere computers beschkbaar stelt, krijg je te maken met beveiliging: hoe voorkom je dat kwaadwillenden beschikking krijgen over de data of over de code-base zelf. Omdat het web inmiddels volledig als applicatieplatform gezien wordt, zijn deze vragen voor dit thema bijzonder relevant. Vanzelfsprekend gaan we niet in op alle aspecten van beveiliging: daar is immers een hele eigen opleiding voor. We beperken ons tot de meest voor de hand liggende zaken die elke goede (web)-programmeur zou moeten inzetten om de applicaties op z'n minst een beetje te beschermen. Specifiek gaan we in op een techniek die sinds enige jaren hier veel voor wordt gebruikt: json web tokens .","title":"Week 5: Beveiliging en jwt"},{"location":"week5/index.html#hoorcollege","text":"Na een korte introductie over beveiliging bespreken we methoden en technieken waarmee webapplicaties veiliger gemaakt kunnen worden. Hierin passeren zaken als password hashing , het toevoegen van salt en 2FA de revue. In aansluiting hierop gaan we in op de problemen die met al deze technieken samenhangen en waarvoor json webtokens ( JWT ) een oplossing probeert te formeren. Aansluitend gaan we uitgebreid in op JWT . We bespreken de technische voordelen hiervan en laten een concrete implementatie zien.","title":"Hoorcollege"},{"location":"week5/index.html#practicum","text":"In het practicum gaan studenten zelf aan de slag met kleine concrete praktische opgaven. Er wordt met Javacript connectie gemaakt met een (gegeven) JWT-server, waarna gekeken wordt hoe voorkomen kan worden dat het token te lang niet wordt ververst, of wat er aan te doen valt wanneer dat wel het geval is. Tijdens dit practicum zal ook gekeken worden naar de voor- en nadelen van opslag van het token in een cookie of in de local storage . Dit biedt als extra'tje de mogelijkheid om te onderzoeken hoe data in de local storage kan worden opgeslagen en geadresseerd. Ook bespreken we hoe het token in de http-header van de request kan worden meegestuurd.","title":"Practicum"},{"location":"week5/index.html#literatuur","text":"RFC 8725: JWT Best Current Practices How hackers hack JWT","title":"Literatuur"},{"location":"week5/memory.html","text":"Memory week 5: Toetsmoment \u00b6 Voor dit oplevermoment moet het mogelijk zijn met een backend te communiceren. Hiervoor maken we gebruik van dezelfde backend als die we bij het practicum hebben gebruikt . Het is hierbij niet de bedoeling dat je aanpassingen aan deze backend gaat doen (maar zie de opmerking bij het practicum zelf ), maar dat je alles regelt vanaf de voorkant. Zorg ervoor dat de top vijf (of hoeveel je maar laat zien) die je bij het memory-spel laat zien daarwerkelijk de top vijf is die op de backend geregisteerd is. Maak een pagina waarmee een speler zich bij deze backend kan registeren. Maak een andere pagina waarop de speler zich kan aanmelden. De backend geeft bij correcte gegevens een JWT token terug dat standaard een TTL heeft van 3600 seconden. Sla het JWT op in de localStorage en zorg ervoor dat dit bij elke request naar de backend in de header wordt meegestuurd. Maak een nieuwe pagina waarop de speler zijn of haar voorkeuren kan opgeven. Deze voorkeuren bestaan uit de favoriete plaatjes-API, de kleur voor gevonden kaartjes en de kleur voor gesloten kaarten. Het moet voor de speler ook mogelijk zijn het opgegeven e-mailadres te wijzigen. Dat kun je op dezelfde pagina doen als waar de voorkeuren worden bijgehouden, of je kunt hier weer een nieuwe pagina voor maken. Als de TTL van het JWT verlopen is, moet de speler een melding krijgen en naar de loginpagina verwezen worden. Tip: om dit te testen kun je de TTL in symfony aanpassen. Voeg daarvoor in config/packages/lexik_jwt_authentication.yaml een key token_ttl toe met een waarde in seconden: lexik_jwt_authentication : secret_key : '%env(resolve:JWT_SECRET_KEY)%' public_key : '%env(resolve:JWT_PUBLIC_KEY)%' pass_phrase : '%env(JWT_PASSPHRASE)%' token_ttl : 300 Bestudeer eventueel de documentatie van de LexikJWTAuthenticationBundle om een beeld te krijgen van de werking hiervan.","title":"Memory (toetsmoment)"},{"location":"week5/memory.html#memory-week-5-toetsmoment","text":"Voor dit oplevermoment moet het mogelijk zijn met een backend te communiceren. Hiervoor maken we gebruik van dezelfde backend als die we bij het practicum hebben gebruikt . Het is hierbij niet de bedoeling dat je aanpassingen aan deze backend gaat doen (maar zie de opmerking bij het practicum zelf ), maar dat je alles regelt vanaf de voorkant. Zorg ervoor dat de top vijf (of hoeveel je maar laat zien) die je bij het memory-spel laat zien daarwerkelijk de top vijf is die op de backend geregisteerd is. Maak een pagina waarmee een speler zich bij deze backend kan registeren. Maak een andere pagina waarop de speler zich kan aanmelden. De backend geeft bij correcte gegevens een JWT token terug dat standaard een TTL heeft van 3600 seconden. Sla het JWT op in de localStorage en zorg ervoor dat dit bij elke request naar de backend in de header wordt meegestuurd. Maak een nieuwe pagina waarop de speler zijn of haar voorkeuren kan opgeven. Deze voorkeuren bestaan uit de favoriete plaatjes-API, de kleur voor gevonden kaartjes en de kleur voor gesloten kaarten. Het moet voor de speler ook mogelijk zijn het opgegeven e-mailadres te wijzigen. Dat kun je op dezelfde pagina doen als waar de voorkeuren worden bijgehouden, of je kunt hier weer een nieuwe pagina voor maken. Als de TTL van het JWT verlopen is, moet de speler een melding krijgen en naar de loginpagina verwezen worden. Tip: om dit te testen kun je de TTL in symfony aanpassen. Voeg daarvoor in config/packages/lexik_jwt_authentication.yaml een key token_ttl toe met een waarde in seconden: lexik_jwt_authentication : secret_key : '%env(resolve:JWT_SECRET_KEY)%' public_key : '%env(resolve:JWT_PUBLIC_KEY)%' pass_phrase : '%env(JWT_PASSPHRASE)%' token_ttl : 300 Bestudeer eventueel de documentatie van de LexikJWTAuthenticationBundle om een beeld te krijgen van de werking hiervan.","title":"Memory week 5: Toetsmoment"},{"location":"week5/practicum.html","text":"Practicum week 5 \u00b6 Tijdens dit practicum (en bij het oplevermoment dat erbij hoort ) maken we gebruik van een backend dat gemaakt is in php met symfony . Clone de repo en volg de instructies in de bijgevoegde README.md om de boel aan de praat te krijgen. Alleen op de frontend Het is de bedoeling dat je alleen aan de frontend werkt. We hebben die backend juist gemaakt om de situatie te simuleren waarin je als developer geen mogelijkheid hebt om een deel van de applicatie (de backend in dit geval) zelf aan te passen. Dat gezegd hebbende is het best mogelijk dat je dingen in de backend tegenkomt die echt beter moeten. We hebben dat ding redelijk snel in elkaar gezet, dus we doen geen enkele garantie over hoe goed het is. Het staat je dus zeker vrij om dit aan te passen en een pull-request te doen. Opgave 1. Opwarmen - JavaScript arrays \u00b6 We beginnen met wat opwarmoefeningen om wat meer inzicht te krijgen in fundamentele JavaScript array-functies. Tijdens het plenaire deel is het \u00e9\u00e9n en ander hieromtrent gedemonstreerd; het is de bedoeling dat je hier nu zelf mee aan de gang gaat. Gegeven de onderstaande array arr . let arr = [ 4 , 12 , 4 , 32 , 5 , 1 , 2 , 4 , 5 , 3 , 2 , 1 , 5 , 3 , 2 , 6 , 4 , 23 , 25 , 57 , 78 , 33 , 42 , 65 , 2 , 16 , 85 , 12 , 87 , 23 , 87 , 23 , 87 , 98 , 23 , 6 , 23 , 65 , 87 , 98 , 1 ] a Maak gebruik van de methode filter om een nieuwe array te maken die alleen de elementen uit arr bevat die deelbaar zijn door 3. b Maak gebruik van de methode map om een nieuwe array te maken die alle elementen uit arr verdubbeld bevat. c Maak gebruik van de methode sort om een nieuwe array te maken die de elementen uit arr gesorteerd (van hoog naar laag) bevat d Maak gebruik van de methode reduce om het totaal van alle elementen uit arr te bepalen Opgave 2. Aggregeren en weergeven van data van de backend \u00b6 Download het bestand week5.zip en pak dit op een logische locatie uit. Deze zip bevat een php bestand get-data.php dat een suggestie wekt van spelers-namen met de scores van de spellen die hebben gespeeld. Bestudeer de code om een beeld te krijgen van de werking hiervan. De zip bevat ook een html bestand waarin gevraagd wordt op gebruikersgegevens (gebruikersnaam en wachtwoord). De bedoeling van deze opgave is het weergeven van de top tien beste spelers met hun scores wanneer de opgestuurde gegevens correct zijn. Start in deze directory een php-server zodat je beschikking hebt over het bestand get-data.php via een netwerk: php -S localhost:8000 Begin met het afvangen van de normale flow van de html: er zit een submit-button in die standaard een POST request doet naar de action . In dit geval willen we de hele boel door JavaScript laten afhandelen, waarbij we de pagina zelf nooit hoeven te verlaten. Maak vervolgens gebruik van FormData om de ingevulde gegevens te serialiseren. Post deze gegevens naar get-data.php . Zorg er in eerste instantie voor dat de gegevens correct zijn (gebruikersnaam: 'Henk', wachtwoord 'OpDeTank'). De backend geeft alle data van alle spelers terug. Maak gebruik van de kennis die je bij de eerste oefening hebt opgedaan om deze data om te zetten in een array van gebruikersnamen met hun totale score. Als je dit hebt gedaan, kun je deze nieuwe array sorteren op de individuele score van de spelers. Zorg er vervolgens voor dat je van deze nieuwe gesorteerde array alleen de eerste tien elementen overhoudt (zie hiervoor eventueel de methode slice ). Itereer over deze laatste array en maak gebruik van de template met id scores om tien regels toe te voegen aan de gegeven tabel met id players . Zorg er tenslotte via css voor dat deze tabel ook daadwerkelijk wordt weergegeven. Opgave 3. Opvangen van verschillende response codes \u00b6 Zoals je kunt zien kan de backend nog twee andere respons codes teruggeven: 401 Unauthorized en 400 Illegal request . Zorg er voor dat de input-velden een dikke rode lijn krijgen wanneer de eerste fout optreedt. Waarom is het onwaarschijnlijk dat in de huidige configuratie de tweede fout optreedt? In wat voor context zou dat wel kunnen, denk je? Opgave 4. Opvangen van een JWT van de Backend \u00b6 Opgave 5: Meesturen van het JWT in elke request \u00b6","title":"Practicum"},{"location":"week5/practicum.html#practicum-week-5","text":"Tijdens dit practicum (en bij het oplevermoment dat erbij hoort ) maken we gebruik van een backend dat gemaakt is in php met symfony . Clone de repo en volg de instructies in de bijgevoegde README.md om de boel aan de praat te krijgen. Alleen op de frontend Het is de bedoeling dat je alleen aan de frontend werkt. We hebben die backend juist gemaakt om de situatie te simuleren waarin je als developer geen mogelijkheid hebt om een deel van de applicatie (de backend in dit geval) zelf aan te passen. Dat gezegd hebbende is het best mogelijk dat je dingen in de backend tegenkomt die echt beter moeten. We hebben dat ding redelijk snel in elkaar gezet, dus we doen geen enkele garantie over hoe goed het is. Het staat je dus zeker vrij om dit aan te passen en een pull-request te doen.","title":"Practicum week 5"},{"location":"week5/practicum.html#opgave-1-opwarmen-javascript-arrays","text":"We beginnen met wat opwarmoefeningen om wat meer inzicht te krijgen in fundamentele JavaScript array-functies. Tijdens het plenaire deel is het \u00e9\u00e9n en ander hieromtrent gedemonstreerd; het is de bedoeling dat je hier nu zelf mee aan de gang gaat. Gegeven de onderstaande array arr . let arr = [ 4 , 12 , 4 , 32 , 5 , 1 , 2 , 4 , 5 , 3 , 2 , 1 , 5 , 3 , 2 , 6 , 4 , 23 , 25 , 57 , 78 , 33 , 42 , 65 , 2 , 16 , 85 , 12 , 87 , 23 , 87 , 23 , 87 , 98 , 23 , 6 , 23 , 65 , 87 , 98 , 1 ] a Maak gebruik van de methode filter om een nieuwe array te maken die alleen de elementen uit arr bevat die deelbaar zijn door 3. b Maak gebruik van de methode map om een nieuwe array te maken die alle elementen uit arr verdubbeld bevat. c Maak gebruik van de methode sort om een nieuwe array te maken die de elementen uit arr gesorteerd (van hoog naar laag) bevat d Maak gebruik van de methode reduce om het totaal van alle elementen uit arr te bepalen","title":"Opgave 1. Opwarmen - JavaScript arrays"},{"location":"week5/practicum.html#opgave-2-aggregeren-en-weergeven-van-data-van-de-backend","text":"Download het bestand week5.zip en pak dit op een logische locatie uit. Deze zip bevat een php bestand get-data.php dat een suggestie wekt van spelers-namen met de scores van de spellen die hebben gespeeld. Bestudeer de code om een beeld te krijgen van de werking hiervan. De zip bevat ook een html bestand waarin gevraagd wordt op gebruikersgegevens (gebruikersnaam en wachtwoord). De bedoeling van deze opgave is het weergeven van de top tien beste spelers met hun scores wanneer de opgestuurde gegevens correct zijn. Start in deze directory een php-server zodat je beschikking hebt over het bestand get-data.php via een netwerk: php -S localhost:8000 Begin met het afvangen van de normale flow van de html: er zit een submit-button in die standaard een POST request doet naar de action . In dit geval willen we de hele boel door JavaScript laten afhandelen, waarbij we de pagina zelf nooit hoeven te verlaten. Maak vervolgens gebruik van FormData om de ingevulde gegevens te serialiseren. Post deze gegevens naar get-data.php . Zorg er in eerste instantie voor dat de gegevens correct zijn (gebruikersnaam: 'Henk', wachtwoord 'OpDeTank'). De backend geeft alle data van alle spelers terug. Maak gebruik van de kennis die je bij de eerste oefening hebt opgedaan om deze data om te zetten in een array van gebruikersnamen met hun totale score. Als je dit hebt gedaan, kun je deze nieuwe array sorteren op de individuele score van de spelers. Zorg er vervolgens voor dat je van deze nieuwe gesorteerde array alleen de eerste tien elementen overhoudt (zie hiervoor eventueel de methode slice ). Itereer over deze laatste array en maak gebruik van de template met id scores om tien regels toe te voegen aan de gegeven tabel met id players . Zorg er tenslotte via css voor dat deze tabel ook daadwerkelijk wordt weergegeven.","title":"Opgave 2. Aggregeren en weergeven van data van de backend"},{"location":"week5/practicum.html#opgave-3-opvangen-van-verschillende-response-codes","text":"Zoals je kunt zien kan de backend nog twee andere respons codes teruggeven: 401 Unauthorized en 400 Illegal request . Zorg er voor dat de input-velden een dikke rode lijn krijgen wanneer de eerste fout optreedt. Waarom is het onwaarschijnlijk dat in de huidige configuratie de tweede fout optreedt? In wat voor context zou dat wel kunnen, denk je?","title":"Opgave 3. Opvangen van verschillende response codes"},{"location":"week5/practicum.html#opgave-4-opvangen-van-een-jwt-van-de-backend","text":"","title":"Opgave 4. Opvangen van een JWT van de Backend"},{"location":"week5/practicum.html#opgave-5-meesturen-van-het-jwt-in-elke-request","text":"","title":"Opgave 5: Meesturen van het JWT in elke request"},{"location":"week6/index.html","text":"Week 6: MVC en Frameworks 1 \u00b6 E\u00e9n van de problemen waar je mee te maken krijgt wanneer je serieus voor het web (en \u00fcberhaupt) gaat ontwikkelen is compartamentalisatie : hoe deel je je applicatie op zo'n manier in dat je enerzijds een wildgroei aan bestanden en scripts voorkomt en anderzijds klassen en objecten hebt die een duidelijke en afgebakende verantwoordelijkheid hebben ( SOLID kortom)? In deze en de volgende week gaan we in op methoden en technieken die hiervoor veelvuldig ingzet worden. We grijpen hier terug op het MVC-ontwerppatroon dat al eerder in de opleiding besproken is. We kijken hoe dit patroon ingezet wordt in een web-omgeving en op welke manier dat de problemen op kan lossen. Hoorcollege \u00b6 Het eerste hoorcollege van dit tweeluik radicaliseert de problemen die ontstaan wanneer er g\u00e9\u00e9n gebruik gemaakt wordt van compartimentalisatie (of MVC). Aan de hand van concrete voorbeelden wordt duidelijk gemaakt dat je al heel snel een onoverzichtelijke brij aan code, klassen en bestanden hebt die niet alleen slecht performet, maar ook nog een onleesbaar en dus ononderhoudbaar is. Hierna bespreken we verschillende manieren om deze problemen te voorkomen, waarbij we uiteindelijk uitkomen op het MVC-ontwerppatroon (of meer hedendaagse vormen daarvan). Tenslotte bespreken we hoe je dit patroon in kunt zetten in een JavaScript-ontwikkelproces. Practicum \u00b6 In het practicum maken we gebruik van een bestaand micro-framework ( knockout.js ) om MVC in een JavaScript-omgeving in te zetten. Aan de hand van concrete en kleine opdrachten wordt dit framework ge\u00efntroduceerd, en wordt toegelicht waarom dit een oplossing kan vormen voor de in het theoriecollege genoemde problematiek. Door de introductie van een dergelijk framework kan de ontwikkelstraat wel wat complexer worden. We laten methoden en technieken zien om met deze toegenomen complexiteit om te gaan. Literatuur \u00b6 Wikipedia over MVC","title":"Inleiding"},{"location":"week6/index.html#week-6-mvc-en-frameworks-1","text":"E\u00e9n van de problemen waar je mee te maken krijgt wanneer je serieus voor het web (en \u00fcberhaupt) gaat ontwikkelen is compartamentalisatie : hoe deel je je applicatie op zo'n manier in dat je enerzijds een wildgroei aan bestanden en scripts voorkomt en anderzijds klassen en objecten hebt die een duidelijke en afgebakende verantwoordelijkheid hebben ( SOLID kortom)? In deze en de volgende week gaan we in op methoden en technieken die hiervoor veelvuldig ingzet worden. We grijpen hier terug op het MVC-ontwerppatroon dat al eerder in de opleiding besproken is. We kijken hoe dit patroon ingezet wordt in een web-omgeving en op welke manier dat de problemen op kan lossen.","title":"Week 6: MVC en Frameworks 1"},{"location":"week6/index.html#hoorcollege","text":"Het eerste hoorcollege van dit tweeluik radicaliseert de problemen die ontstaan wanneer er g\u00e9\u00e9n gebruik gemaakt wordt van compartimentalisatie (of MVC). Aan de hand van concrete voorbeelden wordt duidelijk gemaakt dat je al heel snel een onoverzichtelijke brij aan code, klassen en bestanden hebt die niet alleen slecht performet, maar ook nog een onleesbaar en dus ononderhoudbaar is. Hierna bespreken we verschillende manieren om deze problemen te voorkomen, waarbij we uiteindelijk uitkomen op het MVC-ontwerppatroon (of meer hedendaagse vormen daarvan). Tenslotte bespreken we hoe je dit patroon in kunt zetten in een JavaScript-ontwikkelproces.","title":"Hoorcollege"},{"location":"week6/index.html#practicum","text":"In het practicum maken we gebruik van een bestaand micro-framework ( knockout.js ) om MVC in een JavaScript-omgeving in te zetten. Aan de hand van concrete en kleine opdrachten wordt dit framework ge\u00efntroduceerd, en wordt toegelicht waarom dit een oplossing kan vormen voor de in het theoriecollege genoemde problematiek. Door de introductie van een dergelijk framework kan de ontwikkelstraat wel wat complexer worden. We laten methoden en technieken zien om met deze toegenomen complexiteit om te gaan.","title":"Practicum"},{"location":"week6/index.html#literatuur","text":"Wikipedia over MVC","title":"Literatuur"},{"location":"week6/memory.html","text":"Memory week 6 \u00b6 In de nieuwe versie van het memoryspel worden scores van gebruikers bijgehouden en gevisualiseerd. De app zal hiervoor moeten worden opgeschaald en je zult gebruik maken van geaggregeerde data, waarvoor wij een database beschikbaar stellen met bijbehorende API. Aangezien de applicatie hiervoor opgeschaald zal worden, zul je gebruik maken van een frontend framework: KnockoutJS","title":"Memory"},{"location":"week6/memory.html#memory-week-6","text":"In de nieuwe versie van het memoryspel worden scores van gebruikers bijgehouden en gevisualiseerd. De app zal hiervoor moeten worden opgeschaald en je zult gebruik maken van geaggregeerde data, waarvoor wij een database beschikbaar stellen met bijbehorende API. Aangezien de applicatie hiervoor opgeschaald zal worden, zul je gebruik maken van een frontend framework: KnockoutJS","title":"Memory week 6"},{"location":"week6/practicum.html","text":"Practicum week 6 \u00b6 TodoMVC KnockoutJS Tutorial Als 'bootstrap' voor eindopdracht","title":"Practicum"},{"location":"week6/practicum.html#practicum-week-6","text":"TodoMVC KnockoutJS Tutorial Als 'bootstrap' voor eindopdracht","title":"Practicum week 6"},{"location":"week7/index.html","text":"Week 7: MVC en Frameworks 2 \u00b6 Deze laatste week gaan we verder met MVC en frameworks. Waar we vorige week ge\u00ebindigd zijn met de problemen te identificeren en concrete kleine oplossingen daarvoor aan te bieden, gaan we deze week in op bestaande industrie-standaarden die het afgelopen decennium binnen deze problematiek ontwikkeld zijn. Hoorcollege \u00b6 In het hoorcollege gaan we in op de drie grote spelers op dit gebeid: Vue, Angular en React. We bespreken de verschillen en overeenkomsten tussen deze drie frameworks, gaan in op specifieke use cases en geven van alledrie een korte introductie. De focus ligt hierbij op de manier waarop deze frameworks de ge\u00efdentificeerde problemen adresseren. Verder geven we een korte introductie op TypeScript , de de facto industriestandaard voor het ontwikkelen van grote complexe online applicaties. Hierbij laten we zien hoe dit verschilt en overeenkomt met JavaScript en welke gevolgen deze taal heeft voor het ontwikkelproces. Practicum \u00b6 In het practicum gaan we een eenvoudige applicatie in Angular uitprogrammeren. Hierbij ligt de nadruk gebruikersinteractie, de modularisatie-aanpak van Angular en op het ophalen en weergeven van data. Literatuur \u00b6 A Comparative Analysis of Web Frameworks (Angular JS, React JS, Vue JS)","title":"Inleiding"},{"location":"week7/index.html#week-7-mvc-en-frameworks-2","text":"Deze laatste week gaan we verder met MVC en frameworks. Waar we vorige week ge\u00ebindigd zijn met de problemen te identificeren en concrete kleine oplossingen daarvoor aan te bieden, gaan we deze week in op bestaande industrie-standaarden die het afgelopen decennium binnen deze problematiek ontwikkeld zijn.","title":"Week 7: MVC en Frameworks 2"},{"location":"week7/index.html#hoorcollege","text":"In het hoorcollege gaan we in op de drie grote spelers op dit gebeid: Vue, Angular en React. We bespreken de verschillen en overeenkomsten tussen deze drie frameworks, gaan in op specifieke use cases en geven van alledrie een korte introductie. De focus ligt hierbij op de manier waarop deze frameworks de ge\u00efdentificeerde problemen adresseren. Verder geven we een korte introductie op TypeScript , de de facto industriestandaard voor het ontwikkelen van grote complexe online applicaties. Hierbij laten we zien hoe dit verschilt en overeenkomt met JavaScript en welke gevolgen deze taal heeft voor het ontwikkelproces.","title":"Hoorcollege"},{"location":"week7/index.html#practicum","text":"In het practicum gaan we een eenvoudige applicatie in Angular uitprogrammeren. Hierbij ligt de nadruk gebruikersinteractie, de modularisatie-aanpak van Angular en op het ophalen en weergeven van data.","title":"Practicum"},{"location":"week7/index.html#literatuur","text":"A Comparative Analysis of Web Frameworks (Angular JS, React JS, Vue JS)","title":"Literatuur"},{"location":"week7/memory.html","text":"Memory week 7: Toetsmoment \u00b6 Maak gebruik van knockout.js om met behulp van de backend van de memory-game geaggregeerde data op te halen en in een fraaie visualisatie te tonen.","title":"Memory (toetsmoment)"},{"location":"week7/memory.html#memory-week-7-toetsmoment","text":"Maak gebruik van knockout.js om met behulp van de backend van de memory-game geaggregeerde data op te halen en in een fraaie visualisatie te tonen.","title":"Memory week 7: Toetsmoment"},{"location":"week7/practicum.html","text":"Practicum week 7 \u00b6 TodoMVC Dit keer in Angular Als 'bootstrap' voor eindopdracht","title":"Practicum"},{"location":"week7/practicum.html#practicum-week-7","text":"TodoMVC Dit keer in Angular Als 'bootstrap' voor eindopdracht","title":"Practicum week 7"}]}